# handlers.py
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import CommandStart, Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import load_config
from database import AsyncSessionLocal
from models import User, Poll, Question, Answer, UserPollProgress, UserAnswer
from sqlalchemy.future import select
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

config = load_config()

# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
class PollCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_target = State()
    waiting_for_questions = State()

# FSM –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
class PollTaking(StatesGroup):
    choosing_poll = State()
    answering_questions = State()

poll_buffer = {}
user_poll_state = {}

def get_user_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))
    return kb

async def cmd_start(message: types.Message, state: FSMContext):
    print("üì• /start –æ—Ç:", message.from_user.id)
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar()

        if user:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.role.capitalize()} ‚úÖ")
        else:
            role = "admin" if user_id in config.ADMIN_IDS else "student"
            user = User(tg_id=user_id, role=role)
            session.add(user)
            await session.commit()
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role.capitalize()} ‚úÖ")

        if user.role == "admin":
            kb = ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
            kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
            kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_keyboard())

# –•–µ–Ω–¥–ª–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
async def start_poll_creation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar()

        if user.role not in ("admin", "teacher"):
            return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤.")

    await state.set_state(PollCreation.waiting_for_title.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞:")

async def process_poll_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(PollCreation.waiting_for_target.state)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("—Å—Ç—É–¥–µ–Ω—Ç—ã"), KeyboardButton("—É—á–∏—Ç–µ–ª—è"), KeyboardButton("–≤—Å–µ"))
    await message.answer("–î–ª—è –∫–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –æ–ø—Ä–æ—Å?", reply_markup=kb)

async def process_poll_target(message: types.Message, state: FSMContext):
    if message.text.lower() not in ("—Å—Ç—É–¥–µ–Ω—Ç—ã", "—É—á–∏—Ç–µ–ª—è", "–≤—Å–µ"):
        return await message.answer("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

    await state.update_data(target=message.text.lower())
    await state.set_state(PollCreation.waiting_for_questions.state)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ"))
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚úÖ", reply_markup=kb)

async def process_poll_questions(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ":
        data = await state.get_data()
        async with AsyncSessionLocal() as session:
            poll = Poll(title=data['title'], target_role=data['target'])
            session.add(poll)
            await session.commit()
            await session.refresh(poll)

            for q in data.get("questions", []):
                if '|' in q:
                    q_text, raw_answers = q.split('|', 1)
                    question = Question(poll_id=poll.id, text=q_text.strip(), allow_custom=True)
                    session.add(question)
                    await session.flush()
                    for answer_text in raw_answers.split(';'):
                        ans = Answer(question_id=question.id, text=answer_text.strip())
                        session.add(ans)
                else:
                    question = Question(poll_id=poll.id, text=q.strip())
                    session.add(question)
            await session.commit()

        await message.answer("‚úÖ –û–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_user_keyboard())
        await state.finish()
    else:
        data = await state.get_data()
        questions = data.get("questions", [])
        questions.append(message.text.strip())
        await state.update_data(questions=questions)
        await message.answer(
            "–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë.\n"
            "üí° –ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "–≤–æ–ø—Ä–æ—Å|–≤–∞—Ä–∏–∞–Ω—Ç1;–≤–∞—Ä–∏–∞–Ω—Ç2;–≤–∞—Ä–∏–∞–Ω—Ç3\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç —Ç–∞–∫–∂–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç.\n"
            "–ö–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚úÖ"
        )

async def start_poll_taking(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar()

        completed_result = await session.execute(
            select(UserPollProgress.poll_id).where(
                UserPollProgress.user_id == user.id,
                UserPollProgress.is_completed == True
            )
        )
        completed_poll_ids = [row[0] for row in completed_result.fetchall()]

        polls_result = await session.execute(
            select(Poll).where(
                ((Poll.target_role == user.role) | (Poll.target_role == "–≤—Å–µ")) &
                (~Poll.id.in_(completed_poll_ids))
            )
        )
        polls = polls_result.scalars().all()

        if not polls:
            return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")

        text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:\n"
        for idx, poll in enumerate(polls, start=1):
            text += f"{idx}. {poll.title}\n"

        user_poll_state[user_id] = {"polls": polls}

        await state.set_state(PollTaking.choosing_poll.state)
        await message.answer(text + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:")

async def choose_poll(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")

    index = int(message.text) - 1
    user_data = user_poll_state.get(user_id)
    if not user_data or index >= len(user_data["polls"]):
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞.")

    selected_poll = user_data["polls"][index]
    user_data["poll_id"] = selected_poll.id
    user_data["current_q"] = 0

    async with AsyncSessionLocal() as session:
        questions = (await session.execute(
            select(Question).where(Question.poll_id == selected_poll.id)
        )).scalars().all()

        user_data["questions"] = questions
        user_data["answers"] = []

    await state.set_state(PollTaking.answering_questions.state)
    await send_next_question(message, state)

async def send_next_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = user_poll_state[user_id]
    current_q_index = user_data["current_q"]
    questions = user_data["questions"]

    if current_q_index >= len(questions):
        async with AsyncSessionLocal() as session:
            user_result = await session.execute(select(User).where(User.tg_id == user_id))
            user = user_result.scalar()
            progress = UserPollProgress(
                user_id=user.id,
                poll_id=user_data["poll_id"],
                is_completed=True
            )
            session.add(progress)
            for q_id, ans_text in user_data["answers"]:
                session.add(UserAnswer(user_id=user.id, question_id=q_id, answer_text=ans_text))
            await session.commit()

        await message.answer("‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
        await state.finish()
        return

    question = questions[current_q_index]
    user_data["current_question"] = question

    async with AsyncSessionLocal() as session:
        answers = (await session.execute(
            select(Answer).where(Answer.question_id == question.id)
        )).scalars().all()

    if answers:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        for ans in answers:
            markup.add(KeyboardButton(ans.text))
        if question.allow_custom:
            markup.add(KeyboardButton("‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"))
        await message.answer(f"‚ùì {question.text}", reply_markup=markup)
    else:
        await message.answer(f"‚ùì {question.text}", reply_markup=ReplyKeyboardRemove())

async def process_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = user_poll_state[user_id]

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, CommandStart(), state="*")
    dp.register_message_handler(start_poll_creation, Text(equals="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), state="*")
    dp.register_message_handler(process_poll_title, state=PollCreation.waiting_for_title)
    dp.register_message_handler(process_poll_target, state=PollCreation.waiting_for_target)
    dp.register_message_handler(process_poll_questions, state=PollCreation.waiting_for_questions)
    dp.register_message_handler(start_poll_taking, Text(equals="üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"), state="*")
    dp.register_message_handler(choose_poll, state=PollTaking.choosing_poll)
    dp.register_message_handler(process_answer, state=PollTaking.answering_questions)

