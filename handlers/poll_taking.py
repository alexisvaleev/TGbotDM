from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from database import AsyncSessionLocal
from models import User, Poll, Question, Answer, UserPollProgress, UserAnswer
from sqlalchemy.future import select
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

class PollTaking(StatesGroup):
    choosing_poll = State()
    answering_questions = State()

user_poll_state = {}

async def start_poll_taking(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"start_poll_taking: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        completed_result = await session.execute(
            select(UserPollProgress.poll_id).where(
                UserPollProgress.user_id == user.id,
                UserPollProgress.is_completed == True,
            )
        )
        completed_poll_ids = [row[0] for row in completed_result.fetchall()]
        print(f"completed_poll_ids: {completed_poll_ids}")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã

        polls_result = await session.execute(
            select(Poll).where(
                ((Poll.target_role == user.role) | (Poll.target_role == "–≤—Å–µ"))
                & (~Poll.id.in_(completed_poll_ids))
            )
        )
        polls = polls_result.scalars().all()

        if not polls:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")  # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
            return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")

        text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:\n"
        for idx, poll in enumerate(polls, start=1):
            text += f"{idx}. {poll.title}\n"

        user_poll_state[user_id] = {"polls": polls}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        await state.set_state(PollTaking.choosing_poll.state)
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await message.answer(text + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:")


async def choose_poll(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    print(f"choose_poll: {user_id}, message={message.text}")  # –û—Ç–ª–∞–¥–∫–∞

    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")

    index = int(message.text) - 1
    user_data = user_poll_state.get(user_id)
    if not user_data or index >= len(user_data["polls"]):
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞.")

    selected_poll = user_data["polls"][index]
    user_data["poll_id"] = selected_poll.id
    user_data["current_q"] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

    print(f"Selected Poll: {selected_poll.title}, poll_id: {selected_poll.id}")  # –û—Ç–ª–∞–¥–∫–∞

    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        questions = (await session.execute(select(Question).where(Question.poll_id == selected_poll.id))).scalars().all()
        user_data["questions"] = questions  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_data["answers"] = []  # –û—á–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤

    print(f"Retrieved {len(user_data['questions'])} questions for poll ID {selected_poll.id}")  # –û—Ç–ª–∞–¥–∫–∞

    if not user_data["questions"]:
        return await message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ.")

    await state.set_state(PollTaking.answering_questions.state)
    print(f"FSM –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {PollTaking.answering_questions.state}")
    await send_next_question(message, state)


async def send_next_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = user_poll_state[user_id]
    current_q_index = user_data["current_q"]
    questions = user_data["questions"]

    print(f"send_next_question: {user_id}, current_q_index={current_q_index}, total_questions={len(questions)}")  # –û—Ç–ª–∞–¥–∫–∞

    if current_q_index >= len(questions):  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        await finish_poll(message, state)
        return

    question = questions[current_q_index]
    user_data["current_question"] = question

    async with AsyncSessionLocal() as session:
        answers = (await session.execute(select(Answer).where(Answer.question_id == question.id))).scalars().all()

    if answers:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        for ans in answers:
            markup.add(KeyboardButton(ans.answer_text))
        if question.question_type == 'text':  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–∏–ø–∞ —Ç–µ–∫—Å—Ç
            markup.add(KeyboardButton("‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"))
        await message.answer(f"‚ùì {question.question_text}", reply_markup=markup)
    else:
        await message.answer(f"‚ùì {question.question_text}", reply_markup=ReplyKeyboardRemove())



async def process_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = user_poll_state[user_id]
    question = user_data["current_question"]
    text = message.text.strip()

    if text == "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:")
        return

    user_data["answers"].append((question.id, text))
    user_data["current_q"] += 1
    await send_next_question(message, state)

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import User, UserPollProgress, UserAnswer

# –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ user_poll_state ‚Äî –≤–∞—à –≥–ª–æ–±–∞–ª—å–Ω—ã–π dict
# { tg_id: { "poll_id": ..., "answers": [(question_id, text), ‚Ä¶] } }
async def finish_poll(message: types.Message, state: FSMContext):
    tg_id = message.from_user.id
    user_data = user_poll_state.get(tg_id)

    if not user_data:
        print(f"finish_poll: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
        return

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        db_user = result.scalar()
        if not db_user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        db_user_id = db_user.id

        progress = UserPollProgress(user_id=db_user_id, poll_id=user_data["poll_id"], is_completed=True)
        session.add(progress)

        for question_id, answer_text in user_data["answers"]:
            ua = UserAnswer(user_id=db_user_id, question_id=question_id, answer_text=answer_text)
            session.add(ua)

        try:
            await session.commit()
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} (db_id={db_user_id})")
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return

    await message.answer("‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!", reply_markup=ReplyKeyboardRemove())

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

    await state.finish()
    user_poll_state.pop(tg_id, None)
    print(f"FSM –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")

