from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from database import AsyncSessionLocal
from models import User, Poll, Question, Answer
from sqlalchemy.future import select


class PollCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_target = State()
    waiting_for_question_text = State()
    waiting_for_answer_options = State()
    waiting_for_more_questions = State()


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–ø–æ user_id)
poll_creation_buffer = {}


async def start_poll_creation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar()
        if user.role not in ("admin", "teacher"):
            return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤.")

    await state.set_state(PollCreation.waiting_for_title.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardRemove())


async def process_poll_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(PollCreation.waiting_for_target.state)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("—Å—Ç—É–¥–µ–Ω—Ç—ã"), KeyboardButton("—É—á–∏—Ç–µ–ª—è"), KeyboardButton("–≤—Å–µ"))
    await message.answer("–î–ª—è –∫–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –æ–ø—Ä–æ—Å?", reply_markup=kb)


async def process_poll_target(message: types.Message, state: FSMContext):
    if message.text.lower() not in ("—Å—Ç—É–¥–µ–Ω—Ç—ã", "—É—á–∏—Ç–µ–ª—è", "–≤—Å–µ"):
        return await message.answer("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    await state.update_data(target=message.text.lower())
    poll_creation_buffer[message.from_user.id] = []
    await state.set_state(PollCreation.waiting_for_question_text.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardRemove())


async def process_question_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    poll_creation_buffer.setdefault(user_id, [])
    poll_creation_buffer[user_id].append({'text': message.text, 'answers': []})
    await state.set_state(PollCreation.waiting_for_answer_options.state)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton("‚ùå –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"))
    await message.answer(
        "–î–æ–±–∞–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞? –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ì–æ—Ç–æ–≤–æ\".\n"
        "–ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\".",
        reply_markup=kb
    )


async def process_answer_options(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    last_question = poll_creation_buffer[user_id][-1]

    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await state.set_state(PollCreation.waiting_for_more_questions.state)
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å"))
        await message.answer("–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å?", reply_markup=kb)
        return

    if message.text == "‚ùå –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤":
        await state.set_state(PollCreation.waiting_for_more_questions.state)
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å"))
        await message.answer("–í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å?", reply_markup=kb)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
    last_question['answers'].append(message.text.strip())
    await message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {message.text.strip()}")


async def process_more_questions(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    print(f"process_more_questions triggered by user {user_id} with text: {message.text}")

    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        print("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        await state.set_state(PollCreation.waiting_for_question_text.state)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardRemove())
        return

    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å":
        print("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")
        data = await state.get_data()
        questions = poll_creation_buffer.get(user_id)

        if not questions:
            print("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            await message.answer("‚õî –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
            return

        try:
            async with AsyncSessionLocal() as session:
                poll = Poll(
                    title=data['title'],
                    target_role=data['target'],
                    group_id=None,
                    created_by=user_id
                )
                session.add(poll)
                await session.commit()
                await session.refresh(poll)
                print(f"–°–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å —Å ID {poll.id}")

                for q in questions:
                    question = Question(
                        poll_id=poll.id,
                        question_text=q['text'],
                        question_type='text'  # –∏–ª–∏ 'single_choice', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏
                    )

                    session.add(question)
                    await session.flush()
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å: {q['text']}")

                    for answer_text in q['answers']:
                        ans = Answer(
                            question_id=question.id,
                            answer_text=answer_text,
                            # selected_options –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–≤—Å–µ
                        )

                await session.commit()
                print("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞. –°–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
            return

        poll_creation_buffer.pop(user_id, None)

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
        kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
        await message.answer("‚úÖ –û–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=kb)
        await state.finish()
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return

    else:
        print("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


def register_poll_creation(dp: Dispatcher):
    dp.register_message_handler(start_poll_creation, text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", state="*")
    dp.register_message_handler(process_poll_title, state=PollCreation.waiting_for_title)
    dp.register_message_handler(process_poll_target, state=PollCreation.waiting_for_target)
    dp.register_message_handler(process_question_text, state=PollCreation.waiting_for_question_text)
    dp.register_message_handler(process_answer_options, state=PollCreation.waiting_for_answer_options)
    dp.register_message_handler(process_more_questions, state=PollCreation.waiting_for_more_questions)
