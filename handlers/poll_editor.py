# handlers/poll_editor.py

import io
import csv
from handlers.common import BACK_BTN
from handlers.back import return_to_main_menu
from aiogram import types, Dispatcher
from aiogram.types import (
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from sqlalchemy import select, delete

from database import AsyncSessionLocal
from models import User, Poll, Question, Answer, Group

class PollEditorStates(StatesGroup):
    choosing_poll         = State()  # –≤—ã–±–æ—Ä –æ–ø—Ä–æ—Å–∞
    choosing_mode         = State()  # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã
    # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞
    choosing_field        = State()
    editing_title         = State()
    editing_target        = State()
    editing_group         = State()
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    choosing_question     = State()
    action_menu           = State()
    editing_q_text        = State()
    adding_option         = State()
    choosing_opt_to_del   = State()
    confirming_opt_delete = State()

async def start_poll_editor(message: types.Message, state: FSMContext):
    """–®–∞–≥ 1. –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª ¬´‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å¬ª."""
    tg_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    async with AsyncSessionLocal() as s:
        user = (await s.execute(
            select(User).where(User.tg_id == tg_id)
        )).scalar()
    if not user or user.role not in ("admin", "teacher"):
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã.")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤
    async with AsyncSessionLocal() as s:
        polls = (await s.execute(select(Poll))).scalars().all()
    if not polls:
        return await message.answer("–ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –æ–ø—Ä–æ—Å–æ–≤ –≤ FSM –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await state.update_data(poll_ids=[p.id for p in polls])
    text = "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" + "\n".join(
        f"{i+1}. {p.title}" for i, p in enumerate(polls)
    )
    await state.set_state(PollEditorStates.choosing_poll)
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

async def choose_poll(message: types.Message, state: FSMContext):
    """–®–∞–≥ 2. –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞."""
    data = await state.get_data()
    poll_ids = data.get("poll_ids", [])
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞ —Ü–∏—Ñ—Ä–æ–π.")
    idx = int(message.text) - 1
    if idx < 0 or idx >= len(poll_ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    poll_id = poll_ids[idx]
    await state.update_data(edit_poll_id=poll_id)

    # –ú–µ–Ω—é: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üî§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞"))
    kb.add(KeyboardButton("üìù –í–æ–ø—Ä–æ—Å—ã"))
    kb.add(KeyboardButton("‚ùå –ì–æ—Ç–æ–≤–æ"))
    kb.add(BACK_BTN)
    kb.add(BACK_BTN)
    await state.set_state(PollEditorStates.choosing_mode)
    await message.answer("–ß—Ç–æ –±—É–¥–µ–º –ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb)

async def choose_mode(message: types.Message, state: FSMContext):
    """–®–∞–≥ 3. –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    text = message.text.strip()
    if text == "üî§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞":
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("üî§ –ù–∞–∑–≤–∞–Ω–∏–µ"))
        kb.add(KeyboardButton("üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è"))
        kb.add(KeyboardButton("üè∑ –ì—Ä—É–ø–ø–∞"))
        kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        kb.add(BACK_BTN)
        await state.set_state(PollEditorStates.choosing_field)
        return await message.answer("–ß—Ç–æ –ø—Ä–∞–≤–∏–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö?", reply_markup=kb)

    if text == "üìù –í–æ–ø—Ä–æ—Å—ã":
        data = await state.get_data()
        return await _ask_choose_question(message, state, data["edit_poll_id"])

    # ‚ùå –ì–æ—Ç–æ–≤–æ
    await state.finish()
    return await return_to_main_menu(message)

# ----- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞ -----

async def process_field_choice(message: types.Message, state: FSMContext):
    """–®–∞–≥ 4. –í—ã–±–∏—Ä–∞–µ–º —á—Ç–æ –ø—Ä–∞–≤–∏–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö."""
    text = message.text.strip()
    if text == "üî§ –ù–∞–∑–≤–∞–Ω–∏–µ":
        await state.set_state(PollEditorStates.editing_title)
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:", reply_markup=ReplyKeyboardRemove())

    if text == "üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è":
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("teacher"), KeyboardButton("student"), KeyboardButton("–≤—Å–µ"))
        kb.add(BACK_BTN)
        await state.set_state(PollEditorStates.editing_target)
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=kb)

    if text == "üè∑ –ì—Ä—É–ø–ø–∞":
        async with AsyncSessionLocal() as s:
            groups = (await s.execute(select(Group))).scalars().all()
        if not groups:
            return await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã.")
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for g in groups:
            kb.add(KeyboardButton(g.name))
        kb.add(KeyboardButton("‚ùå –ë–µ–∑ –≥—Ä—É–ø–ø—ã"))
        kb.add(BACK_BTN)
        await state.set_state(PollEditorStates.editing_group)
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=kb)

    # ‚ùå –û—Ç–º–µ–Ω–∞
    await state.set_state(PollEditorStates.choosing_mode)
    return await message.answer("–û—Ç–º–µ–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üî§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞")],
            [KeyboardButton("üìù –í–æ–ø—Ä–æ—Å—ã")],
            [KeyboardButton("‚ùå –ì–æ—Ç–æ–≤–æ")]
        ],
        resize_keyboard=True
    ))

async def process_edit_title(message: types.Message, state: FSMContext):
    """–®–∞–≥ 5–∞. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    new_title = message.text.strip()
    data = await state.get_data()
    poll_id = data["edit_poll_id"]
    async with AsyncSessionLocal() as s:
        await s.execute(
            Poll.__table__
            .update().where(Poll.id == poll_id)
            .values(title=new_title)
        )
        await s.commit()
    await message.answer("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    await _return_to_mode_menu(message, state)

async def process_edit_target(message: types.Message, state: FSMContext):
    """–®–∞–≥ 5–±. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é."""
    new_target = message.text.strip()
    if new_target not in ("teacher", "student", "–≤—Å–µ"):
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    data = await state.get_data()
    poll_id = data["edit_poll_id"]
    async with AsyncSessionLocal() as s:
        await s.execute(
            Poll.__table__
            .update().where(Poll.id == poll_id)
            .values(target_role=new_target)
        )
        await s.commit()
    await message.answer("‚úÖ –ê—É–¥–∏—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await _return_to_mode_menu(message, state)

async def process_edit_group(message: types.Message, state: FSMContext):
    """–®–∞–≥ 5–≤. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É."""
    choice = message.text.strip()
    data = await state.get_data()
    poll_id = data["edit_poll_id"]
    async with AsyncSessionLocal() as s:
        if choice == "‚ùå –ë–µ–∑ –≥—Ä—É–ø–ø—ã":
            grp_id = None
        else:
            grp = (await s.execute(select(Group).where(Group.name == choice))).scalar()
            if not grp:
                return await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã.")
            grp_id = grp.id
        await s.execute(
            Poll.__table__
            .update().where(Poll.id == poll_id)
            .values(group_id=grp_id)
        )
        await s.commit()
    await message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await _return_to_mode_menu(message, state)

# ----- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ -----

async def _ask_choose_question(message: types.Message, state: FSMContext, poll_id: int):
    """–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞."""
    async with AsyncSessionLocal() as s:
        qs = (await s.execute(select(Question).where(Question.poll_id == poll_id))).scalars().all()
    if not qs:
        await message.answer("–£ –æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=ReplyKeyboardRemove())
        return await _return_to_mode_menu(message, state)

    await state.update_data(question_ids=[q.id for q in qs])
    text = "üìù –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:\n" + "\n".join(
        f"{i+1}. {q.question_text}" for i, q in enumerate(qs)
    )
    await state.set_state(PollEditorStates.choosing_question)
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

async def choose_question(message: types.Message, state: FSMContext):
    """–®–∞–≥ 6. –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –≤–æ–ø—Ä–æ—Å."""
    data = await state.get_data()
    q_ids = data.get("question_ids", [])
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ —Ü–∏—Ñ—Ä–æ–π.")
    idx = int(message.text) - 1
    if idx < 0 or idx >= len(q_ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    q_id = q_ids[idx]
    await state.update_data(edit_q_id=q_id)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üî§ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç"))
    kb.add(KeyboardButton("‚úÇÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç"))
    kb.add(KeyboardButton("‚ùå –ì–æ—Ç–æ–≤–æ"))
    kb.add(BACK_BTN)
    await state.set_state(PollEditorStates.action_menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º:", reply_markup=kb)

async def action_menu_handler(message: types.Message, state: FSMContext):
    """–®–∞–≥ 7. –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º."""
    text = message.text.strip()
    if text == "üî§ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç":
        await state.set_state(PollEditorStates.editing_q_text)
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardRemove())

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç":
        await state.set_state(PollEditorStates.adding_option)
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())

    if text == "‚úÇÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç":
        data = await state.get_data()
        q_id = data["edit_q_id"]
        async with AsyncSessionLocal() as s:
            opts = (await s.execute(select(Answer).where(Answer.question_id == q_id))).scalars().all()
        if not opts:
            return await message.answer("–£ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for i, opt in enumerate(opts):
            kb.add(KeyboardButton(f"{i+1}. {opt.answer_text}"))
        await state.set_state(PollEditorStates.choosing_opt_to_del)
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

    # ‚ùå –ì–æ—Ç–æ–≤–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∂–∏–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    await state.set_state(PollEditorStates.choosing_mode)
    return await choose_mode(message, state)

async def process_editing_q_text(message: types.Message, state: FSMContext):
    """–®–∞–≥ 8–∞. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞."""
    new_text = message.text.strip()
    data = await state.get_data()
    q_id = data["edit_q_id"]
    async with AsyncSessionLocal() as s:
        await s.execute(
            Question.__table__
            .update().where(Question.id == q_id)
            .values(question_text=new_text)
        )
        await s.commit()
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    await _return_to_actions(message, state)

async def process_adding_option(message: types.Message, state: FSMContext):
    """–®–∞–≥ 8–±. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞."""
    opt_text = message.text.strip()
    data = await state.get_data()
    q_id = data["edit_q_id"]
    async with AsyncSessionLocal() as s:
        s.add(Answer(question_id=q_id, answer_text=opt_text))
        await s.commit()
    await message.answer(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç '{opt_text}' –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    await _return_to_actions(message, state)

async def choose_option_to_delete(message: types.Message, state: FSMContext):
    """–®–∞–≥ 8–≤. –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    text = message.text.strip()
    if ". " not in text:
        return await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º.")
    idx = int(text.split(".")[0]) - 1
    data = await state.get_data()
    q_id = data["edit_q_id"]
    async with AsyncSessionLocal() as s:
        opts = (await s.execute(select(Answer).where(Answer.question_id == q_id))).scalars().all()
    if idx < 0 or idx >= len(opts):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    answer = opts[idx]
    await state.update_data(del_opt_id=answer.id)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç"))
    await state.set_state(PollEditorStates.confirming_opt_delete)
    await message.answer(f"–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç '{answer.answer_text}'?", reply_markup=kb)

async def confirm_option_delete(message: types.Message, state: FSMContext):
    """–®–∞–≥ 8–≥. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞."""
    ans = message.text.strip()
    data = await state.get_data()
    opt_id = data["del_opt_id"]
    if ans == "‚úÖ –î–∞":
        async with AsyncSessionLocal() as s:
            await s.execute(delete(Answer).where(Answer.id == opt_id))
            await s.commit()
        await message.answer("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await _return_to_actions(message, state)

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======

async def _return_to_mode_menu(message: types.Message, state: FSMContext):
    """–ü–æ—Å–ª–µ –ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞."""
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üî§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞"))
    kb.add(KeyboardButton("üìù –í–æ–ø—Ä–æ—Å—ã"))
    kb.add(KeyboardButton("‚ùå –ì–æ—Ç–æ–≤–æ"))
    await state.set_state(PollEditorStates.choosing_mode)
    await message.answer("–ß—Ç–æ –ø—Ä–∞–≤–∏–º –¥–∞–ª—å—à–µ?", reply_markup=kb)

async def _return_to_actions(message: types.Message, state: FSMContext):
    """–ü–æ—Å–ª–µ –ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º."""
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üî§ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç"))
    kb.add(KeyboardButton("‚úÇÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç"))
    kb.add(KeyboardButton("‚ùå –ì–æ—Ç–æ–≤–æ"))
    await state.set_state(PollEditorStates.action_menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

async def _return_to_admin_menu(message: types.Message):
    await return_to_main_menu(message)

def register_poll_editor(dp: Dispatcher):
    dp.register_message_handler(start_poll_editor, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å", state="*")
    dp.register_message_handler(choose_poll, state=PollEditorStates.choosing_poll)
    dp.register_message_handler(choose_mode, state=PollEditorStates.choosing_mode)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞
    dp.register_message_handler(process_field_choice, state=PollEditorStates.choosing_field)
    dp.register_message_handler(process_edit_title, state=PollEditorStates.editing_title)
    dp.register_message_handler(process_edit_target, state=PollEditorStates.editing_target)
    dp.register_message_handler(process_edit_group, state=PollEditorStates.editing_group)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    dp.register_message_handler(choose_question, state=PollEditorStates.choosing_question)
    dp.register_message_handler(action_menu_handler, state=PollEditorStates.action_menu)
    dp.register_message_handler(process_editing_q_text, state=PollEditorStates.editing_q_text)
    dp.register_message_handler(process_adding_option, state=PollEditorStates.adding_option)
    dp.register_message_handler(choose_option_to_delete, state=PollEditorStates.choosing_opt_to_del)
    dp.register_message_handler(confirm_option_delete, state=PollEditorStates.confirming_opt_delete)
