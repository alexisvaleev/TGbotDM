# handlers/user_management.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.future import select
from sqlalchemy import delete, update

from database import AsyncSessionLocal
from models import User
from handlers.common import BACK, BACK_BTN
from handlers.start import _send_main_menu


class UserMgmtStates(StatesGroup):
    choosing_action    = State()
    adding_id          = State()
    choosing_new_role  = State()
    choosing_user      = State()
    confirming_delete  = State()
    editing_user_role  = State()


async def start_user_management(message: types.Message, state: FSMContext):
    tg = message.from_user.id
    async with AsyncSessionLocal() as s:
        me = (await s.execute(select(User).where(User.tg_id == tg))).scalar()
    if not me or me.role not in ("admin", "teacher"):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    # –º–µ–Ω—é
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    kb.add(KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"), KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    kb.add(BACK_BTN)
    await UserMgmtStates.choosing_action.set()
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=kb)


async def process_user_action(message: types.Message, state: FSMContext):
    cmd = message.text.strip()
    tg = message.from_user.id
    async with AsyncSessionLocal() as s:
        me = (await s.execute(select(User).where(User.tg_id == tg))).scalar()

    # 1) —Å–ø–∏—Å–æ–∫
    if cmd == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        q = select(User)
        if me.role == "teacher":
            q = q.where(User.role != "admin")
        async with AsyncSessionLocal() as s2:
            users = (await s2.execute(q)).scalars().all()
        lines = [f"{u.id}. tg={u.tg_id} role={u.role}" for u in users] or ["‚õî –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
        await message.answer("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(lines), reply_markup=ReplyKeyboardRemove())
        return await _return_to_menu(message, state)

    # 2) –¥–æ–±–∞–≤–∏—Ç—å
    if cmd == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await UserMgmtStates.adding_id.set()
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ TG ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=ReplyKeyboardRemove())

    # 3) —É–¥–∞–ª–∏—Ç—å
    if cmd == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        q = select(User).where(User.role != "admin") if me.role == "teacher" else select(User)
        async with AsyncSessionLocal() as s2:
            users = (await s2.execute(q)).scalars().all()
        if not users:
            await message.answer("‚õî –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=ReplyKeyboardRemove())
            return await _return_to_menu(message, state)
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for u in users:
            kb.add(KeyboardButton(f"{u.id}. {u.tg_id} ({u.role})"))
        kb.add(BACK_BTN)
        await state.update_data(user_action="delete")
        await UserMgmtStates.choosing_user.set()
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

    # 4) —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å
    if cmd == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å":
        q = select(User).where(User.role != "admin") if me.role == "teacher" else select(User)
        async with AsyncSessionLocal() as s2:
            users = (await s2.execute(q)).scalars().all()
        if not users:
            await message.answer("‚õî –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=ReplyKeyboardRemove())
            return await _return_to_menu(message, state)
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for u in users:
            kb.add(KeyboardButton(f"{u.id}. {u.tg_id} ({u.role})"))
        kb.add(BACK_BTN)
        await state.update_data(user_action="edit")
        await UserMgmtStates.choosing_user.set()
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏:", reply_markup=kb)

    # 5) –≥–æ—Ç–æ–≤–æ
    if cmd in ("‚úÖ –ì–æ—Ç–æ–≤–æ", BACK):
        await state.finish()
        return await _send_main_menu(message, me.role)

    return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


async def process_add_id(message: types.Message, state: FSMContext):
    txt = message.text.strip()
    if not txt.isdigit():
        return await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–π TG ID.")
    await state.update_data(new_tg_id=int(txt))
    # –≤—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    roles = ["teacher", "student"]  # –∞–¥–º–∏–Ω –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—é
    kb.add(*(KeyboardButton(r) for r in roles))
    kb.add(BACK_BTN)
    await UserMgmtStates.choosing_new_role.set()
    return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)


async def process_choose_role(message: types.Message, state: FSMContext):
    new_role = message.text.strip()
    data = await state.get_data()
    tg_new = data["new_tg_id"]

    if new_role not in ("admin", "teacher", "student"):
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∫–Ω–æ–ø–∫–æ–π.")
    # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π user ‚Äî teacher, –∑–∞–ø—Ä–µ—Ç–∏–º admin
    tg = message.from_user.id
    async with AsyncSessionLocal() as s:
        me = (await s.execute(select(User).where(User.tg_id == tg))).scalar()
    if me.role == "teacher" and new_role == "admin":
        return await message.answer("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å admin.", reply_markup=ReplyKeyboardRemove())

    async with AsyncSessionLocal() as s2:
        exists = (await s2.execute(select(User).where(User.tg_id == tg_new))).scalar()
        if exists:
            return await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove())
        s2.add(User(tg_id=tg_new, role=new_role))
        await s2.commit()

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_new} —Å–æ–∑–¥–∞–Ω –∫–∞–∫ {new_role}.", reply_markup=ReplyKeyboardRemove())
    return await _return_to_menu(message, state)


async def process_choose_user(message: types.Message, state: FSMContext):
    txt = message.text.split(".")[0]
    if not txt.isdigit():
        return await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º.")
    uid = int(txt)
    data = await state.get_data()
    action = data.get("user_action")

    # –ü–æ–ª—É—á–∞–µ–º target –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º admin
    async with AsyncSessionLocal() as s:
        target = (await s.execute(select(User).where(User.id == uid))).scalar()
    if not target:
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # —É—á–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Ç—Ä–æ–≥–∞—Ç—å –∞–¥–º–∏–Ω–∞
    me_tg = message.from_user.id
    async with AsyncSessionLocal() as s2:
        me = (await s2.execute(select(User).where(User.tg_id == me_tg))).scalar()
    if me.role == "teacher" and target.role == "admin":
        return await message.answer("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    await state.update_data(chosen_user_id=target.id)

    if action == "delete":
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç"), BACK_BTN)
        await UserMgmtStates.confirming_delete.set()
        return await message.answer(f"–£–¥–∞–ª–∏—Ç—å {target.tg_id} ({target.role})?", reply_markup=kb)

    if action == "edit":
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        # —É—á–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å admin
        roles = ["teacher", "student"] if me.role=="teacher" else ["admin","teacher","student"]
        kb.add(*(KeyboardButton(r) for r in roles))
        kb.add(BACK_BTN)
        await UserMgmtStates.editing_user_role.set()
        return await message.answer(f"–ù–æ–≤–∞—è —Ä–æ–ª—å –¥–ª—è {target.tg_id}:", reply_markup=kb)


async def process_confirm_delete(message: types.Message, state: FSMContext):
    ans = message.text.strip()
    data = await state.get_data()
    uid  = data["chosen_user_id"]
    if ans == "‚úÖ –î–∞":
        async with AsyncSessionLocal() as s:
            await s.execute(delete(User).where(User.id == uid))
            await s.commit()
        await message.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return await _return_to_menu(message, state)


async def process_edit_user_role(message: types.Message, state: FSMContext):
    new_role = message.text.strip()
    if new_role not in ("admin","teacher","student"):
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∫–Ω–æ–ø–∫–æ–π.")
    data = await state.get_data()
    uid = data["chosen_user_id"]

    # –æ–ø—è—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∞–¥–º–∏–Ω–∞
    async with AsyncSessionLocal() as s1:
        target = (await s1.execute(select(User).where(User.id == uid))).scalar()
    if target.role == "admin" and new_role != "admin":
        return await message.answer("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    async with AsyncSessionLocal() as s2:
        await s2.execute(update(User).where(User.id==uid).values(role=new_role))
        await s2.commit()
    await message.answer(f"‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_role}.", reply_markup=ReplyKeyboardRemove())
    return await _return_to_menu(message, state)


async def _return_to_menu(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    kb.add(KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"), KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    kb.add(BACK_BTN)
    await UserMgmtStates.choosing_action.set()
    return await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=kb)


def register_user_management(dp: Dispatcher):
    dp.register_message_handler(start_user_management,
                                text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", state="*")
    dp.register_message_handler(process_user_action,
                                state=UserMgmtStates.choosing_action)
    dp.register_message_handler(process_add_id,
                                state=UserMgmtStates.adding_id)
    dp.register_message_handler(process_choose_role,
                                state=UserMgmtStates.choosing_new_role)
    dp.register_message_handler(process_choose_user,
                                state=UserMgmtStates.choosing_user)
    dp.register_message_handler(process_confirm_delete,
                                state=UserMgmtStates.confirming_delete)
    dp.register_message_handler(process_edit_user_role,
                                state=UserMgmtStates.editing_user_role)
