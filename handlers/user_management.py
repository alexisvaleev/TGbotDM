from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from sqlalchemy.future import select
from sqlalchemy import delete, update
from database import AsyncSessionLocal
from models import User
from handlers.start import _send_main_menu
from handlers.common import BACK_BTN

class UserMgmtStates(StatesGroup):
    choosing_action      = State()
    adding_id            = State()
    choosing_new_role    = State()
    choosing_user        = State()
    confirming_delete    = State()
    editing_user_role    = State()


async def start_user_management(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ–º FSM —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å admin –∏–ª–∏ teacher
    tg = message.from_user.id
    async with AsyncSessionLocal() as s:
        user = (await s.execute(
            select(User).where(User.tg_id == tg)
        )).scalar()
    if not user or user.role not in ("admin", "teacher"):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    kb.add(KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"), KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    kb.add(BACK_BTN)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª
    await UserMgmtStates.choosing_action.set()
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb)


async def process_user_action(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    cmd = message.text.strip()
    if cmd == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        async with AsyncSessionLocal() as s:
            users = (await s.execute(select(User))).scalars().all()
        lines = []
        for u in users:
            grp = getattr(u, "group", None)
            grp_name = grp.name if grp else "-"
            lines.append(f"{u.id}. tg={u.tg_id} role={u.role} group={grp_name}")
        text = "üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(lines) if lines else "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        await message.answer(text, reply_markup=ReplyKeyboardRemove())
        return await _return_to_menu(message, state)

    if cmd == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await UserMgmtStates.adding_id.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ TG ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=ReplyKeyboardRemove())
        return

    if cmd == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        # –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä
        async with AsyncSessionLocal() as s:
            users = (await s.execute(select(User))).scalars().all()
        if not users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=ReplyKeyboardRemove())
            return await _return_to_menu(message, state)

        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for u in users:
            kb.add(KeyboardButton(f"{u.id}. {u.tg_id} ({u.role})"))
        await state.update_data(user_action="delete")
        await UserMgmtStates.choosing_user.set()
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

    if cmd == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å":
        # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        async with AsyncSessionLocal() as s:
            users = (await s.execute(select(User))).scalars().all()
        if not users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=ReplyKeyboardRemove())
            return await _return_to_menu(message, state)

        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for u in users:
            kb.add(KeyboardButton(f"{u.id}. {u.tg_id} ({u.role})"))
        await state.update_data(user_action="edit")
        await UserMgmtStates.choosing_user.set()
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏:", reply_markup=kb)

    if cmd == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await state.finish()
        return await _send_main_menu(message, role="admin")

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
    return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


async def process_add_id(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥–∏–º new TG ID."""
    txt = message.text.strip()
    if not txt.isdigit():
        return await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–π TG ID.")
    await state.update_data(new_tg_id=int(txt))

    # –í—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("admin"), KeyboardButton("teacher"), KeyboardButton("student"))
    await UserMgmtStates.choosing_new_role.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)


async def process_choose_role(message: types.Message, state: FSMContext):
    """–í—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º."""
    role = message.text.strip()
    if role not in ("admin", "teacher", "student"):
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∫–Ω–æ–ø–∫–æ–π.")
    data = await state.get_data()
    tg_new = data["new_tg_id"]

    async with AsyncSessionLocal() as s:
        exists = (await s.execute(
            select(User).where(User.tg_id == tg_new)
        )).scalar()
        if exists:
            return await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        s.add(User(tg_id=tg_new, role=role))
        await s.commit()

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_new} —Å–æ–∑–¥–∞–Ω —Å —Ä–æ–ª—å—é {role}.", reply_markup=ReplyKeyboardRemove())
    return await _return_to_menu(message, state)


async def process_choose_user(message: types.Message, state: FSMContext):
    """–í—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    txt = message.text.split(".")[0]
    if not txt.isdigit():
        return await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º.")
    idx = int(txt)
    data = await state.get_data()
    action = data.get("user_action")

    async with AsyncSessionLocal() as s:
        user = (await s.execute(select(User).where(User.id == idx))).scalar()
    if not user:
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.update_data(chosen_user_id=user.id)

    if action == "delete":
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç"))
        await UserMgmtStates.confirming_delete.set()
        return await message.answer(
            f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id} (role={user.role})?",
            reply_markup=kb
        )

    if action == "edit":
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton("admin"), KeyboardButton("teacher"), KeyboardButton("student"))
        await UserMgmtStates.editing_user_role.set()
        return await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è {user.tg_id} (—Ç–µ–∫—É—â–∞—è {user.role}):",
            reply_markup=kb
        )


async def process_confirm_delete(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    ans = message.text.strip()
    data = await state.get_data()
    uid  = data["chosen_user_id"]

    if ans == "‚úÖ –î–∞":
        async with AsyncSessionLocal() as s:
            await s.execute(delete(User).where(User.id == uid))
            await s.commit()
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())

    return await _return_to_menu(message, state)


async def process_edit_user_role(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    new_role = message.text.strip()
    if new_role not in ("admin", "teacher", "student"):
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∫–Ω–æ–ø–∫–æ–π.")
    data = await state.get_data()
    uid  = data["chosen_user_id"]

    async with AsyncSessionLocal() as s:
        await s.execute(
            update(User)
            .where(User.id == uid)
            .values(role=new_role)
        )
        await s.commit()

    await message.answer(f"‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_role}.", reply_markup=ReplyKeyboardRemove())
    return await _return_to_menu(message, state)


async def _return_to_menu(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    kb.add(KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"), KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    await UserMgmtStates.choosing_action.set()
    return await message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


def register_user_management(dp: Dispatcher):
    dp.register_message_handler(
        start_user_management,
        text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        state="*"
    )
    dp.register_message_handler(
        process_user_action,
        state=UserMgmtStates.choosing_action
    )
    dp.register_message_handler(
        process_add_id,
        state=UserMgmtStates.adding_id
    )
    dp.register_message_handler(
        process_choose_role,
        state=UserMgmtStates.choosing_new_role
    )
    dp.register_message_handler(
        process_choose_user,
        state=UserMgmtStates.choosing_user
    )
    dp.register_message_handler(
        process_confirm_delete,
        state=UserMgmtStates.confirming_delete
    )
    dp.register_message_handler(
        process_edit_user_role,
        state=UserMgmtStates.editing_user_role
    )
