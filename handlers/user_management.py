# handlers/user_management.py

import itertools
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy.future import select
from sqlalchemy import insert

from config import load_config
from database import AsyncSessionLocal
from models import User, Group
from handlers.common import BACK, BACK_BTN
from handlers.back import return_to_main_menu

config = load_config()

class UserMgmtStates(StatesGroup):
    waiting_for_id   = State()
    waiting_for_role = State()


async def add_users_to_db(dp: Dispatcher):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ .env (ADMIN_IDS, TEACHER_IDS, STUDENT_IDS)
    –≤ —Ç–∞–±–ª–∏—Ü–µ users: –¥–æ–±–∞–≤–ª—è–µ—Ç, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç.
    """
    ids_roles = (
        (config.ADMIN_IDS,   "admin"),
        (config.TEACHER_IDS, "teacher"),
        (config.STUDENT_IDS, "student"),
    )
    async with AsyncSessionLocal() as session:
        for ids, role in ids_roles:
            for tg_id in ids:
                row = await session.execute(
                    select(User).where(User.tg_id == tg_id)
                )
                if not row.scalar_one_or_none():
                    session.add(User(tg_id=tg_id, role=role))
        await session.commit()
    print("‚úÖ add_users_to_db: users synced from .env")


async def cmd_view_users(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –§–ò–û, —Ä–æ–ª—å—é –∏ –≥—Ä—É–ø–ø–æ–π.
    –î–æ—Å—Ç—É–ø–Ω–æ admin –∏ teacher.
    """
    tg = message.from_user.id
    async with AsyncSessionLocal() as session:
        me = (await session.execute(
            select(User).where(User.tg_id == tg)
        )).scalar_one_or_none()
        if not me or me.role not in ("admin", "teacher"):
            return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

        users = (await session.execute(select(User))).scalars().all()
        groups = (await session.execute(select(Group))).scalars().all()
    grp_map = {g.id: g.name for g in groups}

    lines = []
    for u in users:
        fio = " ".join(filter(None, (
            getattr(u, "surname", "") or "",
            getattr(u, "name",      "") or "",
            getattr(u, "patronymic","") or "",
        ))).strip() or "‚Äî"
        grp_name = grp_map.get(u.group_id, "‚Äî")
        lines.append(f"{u.id}. {fio} ({u.role}) ‚Äî {grp_name}")

    text = "\n".join(lines) or "üö´ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await message.answer(text, reply_markup=BACK_BTN)


async def start_add_user(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç FSM –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –î–æ—Å—Ç—É–ø–Ω–æ admin –∏ teacher.
    """
    tg = message.from_user.id
    async with AsyncSessionLocal() as session:
        me = (await session.execute(
            select(User).where(User.tg_id == tg)
        )).scalar_one_or_none()
    if not me or me.role not in ("admin", "teacher"):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

    await UserMgmtStates.waiting_for_id.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()
    )


async def process_user_id(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç Telegram ID, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å.
    """
    txt = message.text.strip()
    if txt == BACK:
        await state.finish()
        return await return_to_main_menu(message)
    if not txt.isdigit():
        return await message.answer("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

    await state.update_data(new_tg_id=int(txt))

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for role in ("admin", "teacher", "student"):
        kb.add(KeyboardButton(role))
    kb.add(BACK_BTN)

    await UserMgmtStates.waiting_for_role.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)


async def process_user_role(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –∏ —Å–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    """
    txt = message.text.strip().lower()
    if txt == BACK:
        await state.finish()
        return await return_to_main_menu(message)
    if txt not in ("admin", "teacher", "student"):
        return await message.answer("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∫–Ω–æ–ø–∫–∞–º–∏.")

    data = await state.get_data()
    new_tg = data["new_tg_id"]

    async with AsyncSessionLocal() as session:
        existing = (await session.execute(
            select(User).where(User.tg_id == new_tg)
        )).scalar_one_or_none()

        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
            await session.execute(
                User.__table__.update()
                .where(User.tg_id == new_tg)
                .values(role=txt)
            )
            msg = f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_tg} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ¬´{txt}¬ª."
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
            await session.execute(
                insert(User).values(
                    tg_id=new_tg,
                    role=txt,
                    group_id=None,
                    surname=None,
                    name=None,
                    patronymic=None
                )
            )
            msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_tg} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é ¬´{txt}¬ª."

        await session.commit()

    await state.finish()
    await message.answer(msg, reply_markup=ReplyKeyboardRemove())
    return await return_to_main_menu(message)


def register_user_management(dp: Dispatcher):
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ .env –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py: await add_users_to_db(dp)
    # -----------------------------
    dp.register_message_handler(
        cmd_view_users,
        text=["üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"],
        state="*"
    )
    dp.register_message_handler(
        start_add_user,
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        state="*"
    )
    dp.register_message_handler(
        process_user_id,
        state=UserMgmtStates.waiting_for_id
    )
    dp.register_message_handler(
        process_user_role,
        state=UserMgmtStates.waiting_for_role
    )
