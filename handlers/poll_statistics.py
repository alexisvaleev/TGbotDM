# handlers/poll_statistics.py

from collections import Counter
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy.future import select

from database import AsyncSessionLocal
from handlers.common import BACK_BTN
from handlers.back import return_to_main_menu
from handlers.start import _send_main_menu
from models import User, Poll, Question, Answer, UserAnswer

class StatsStates(StatesGroup):
    choosing_poll = State()


async def start_stats(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±–æ—Ä –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    await state.finish()
    tg = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    async with AsyncSessionLocal() as s:
        user = (await s.execute(
            select(User).where(User.tg_id == tg)
        )).scalar_one_or_none()
    if not user or user.role != "admin":
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as s:
        polls = (await s.execute(select(Poll))).scalars().all()
    if not polls:
        return await message.answer("–ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=BACK_BTN)

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ä–æ—Å–∞–º–∏
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for idx, p in enumerate(polls, start=1):
        kb.add(KeyboardButton(f"{idx}. {p.title}"))
    kb.add(BACK_BTN)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID-—Å–ø–∏—Å–æ–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ –≤—ã–±–æ—Ä
    await state.update_data(poll_ids=[p.id for p in polls])
    await StatsStates.choosing_poll.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)


async def choose_poll_stats(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    txt = message.text.strip()
    if txt == BACK_BTN:
        await state.finish()
        return await return_to_main_menu(message)

    data = await state.get_data()
    poll_ids = data.get("poll_ids", [])
    parts = txt.split(".", 1)
    if not parts[0].isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –æ–ø—Ä–æ—Å–∞.")
    idx = int(parts[0]) - 1
    if idx < 0 or idx >= len(poll_ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞.")

    poll_id = poll_ids[idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞: #{poll_id}\n"]
    async with AsyncSessionLocal() as s:
        questions = (await s.execute(
            select(Question).where(Question.poll_id == poll_id)
        )).scalars().all()

        for q in questions:
            lines.append(f"üîπ {q.question_text}")
            uas = (await s.execute(
                select(UserAnswer).where(UserAnswer.question_id == q.id)
            )).scalars().all()
            total = len(uas)
            opts = (await s.execute(
                select(Answer).where(Answer.question_id == q.id)
            )).scalars().all()

            if opts:
                cnt = Counter(ua.answer_text for ua in uas)
                for o in opts:
                    c = cnt.get(o.answer_text, 0)
                    pct = (c / total * 100) if total else 0
                    lines.append(f"    ‚Ä¢ {o.answer_text}: {c}/{total} ({pct:.1f}%)")
            else:
                lines.append(f"    ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {total}")
            lines.append("")

    # –°–±—Ä–æ—Å FSM –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    await state.finish()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await message.answer("\n".join(lines), reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(BACK_BTN))
    # –ò —Å—Ä–∞–∑—É –∂–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await _send_main_menu(message, user.role if (user := await _get_user(message.from_user.id)) else "unknown")


async def _get_user(tg_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π: –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —é–∑–µ—Ä–∞ –∏–∑ –ë–î."""
    async with AsyncSessionLocal() as s:
        return (await s.execute(select(User).where(User.tg_id == tg_id))).scalar_one_or_none()


def register_poll_statistics(dp: Dispatcher):
    dp.register_message_handler(start_stats, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", state="*")
    dp.register_message_handler(choose_poll_stats, state=StatsStates.choosing_poll)
