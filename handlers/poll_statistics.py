# handlers/poll_statistics.py

import io
import csv

from aiogram import types, Dispatcher
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
    ReplyKeyboardRemove
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from sqlalchemy import func
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import Poll, Question, Answer, Response
from .common import BACK
from .back import return_to_main_menu

class StatStates(StatesGroup):
    choosing_poll = State()

async def start_stats(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await state.finish()
    async with AsyncSessionLocal() as s:
        polls = (await s.execute(select(Poll))).scalars().all()

    if not polls:
        return await message.answer(
            "üö´ –ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=ReplyKeyboardRemove()
        )

    kb = InlineKeyboardMarkup(row_width=1)
    for p in polls:
        kb.add(InlineKeyboardButton(p.title, callback_data=f"stat_{p.id}"))
    kb.add(InlineKeyboardButton(BACK, callback_data="stat_back"))

    await StatStates.choosing_poll.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å:", reply_markup=kb)

async def poll_stats_callback(query: types.CallbackQuery, state: FSMContext):
    """
    –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–ø—Ä–æ—Å—É –∏ –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ + inline-–∫–Ω–æ–ø–∫–∏ ¬´–°–∫–∞—á–∞—Ç—å CSV¬ª.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –¥–∞–∂–µ —Å –Ω—É–ª—ë–º –≤—ã–±–æ—Ä–æ–≤.
    """
    data = query.data
    if data == "stat_back":
        await state.finish()
        await query.message.delete_reply_markup()
        return await return_to_main_menu(query.message)

    poll_id = int(data.split("_", 1)[1])

    async with AsyncSessionLocal() as s:
        poll = (await s.execute(
            select(Poll).where(Poll.id == poll_id)
        )).scalar_one_or_none()
        if not poll:
            return await query.answer("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        stats = []
        questions = (await s.execute(
            select(Question).where(Question.poll_id == poll_id)
        )).scalars().all()

        for q in questions:
            if q.question_type != "text":
                # –ë–µ—Ä—ë–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —Å—á–∏—Ç–∞–µ–º 0, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤
                rows = (await s.execute(
                    select(
                        Answer.answer_text,
                        func.coalesce(func.count(Response.id), 0).label("cnt")
                    )
                    .outerjoin(Response, Response.answer_id == Answer.id)
                    .where(Answer.question_id == q.id)
                    .group_by(Answer.answer_text)
                )).all()
                total = sum(cnt for _, cnt in rows) or 1
                stats.append((
                    q.question_text,
                    [(ans, cnt, cnt / total * 100) for ans, cnt in rows]
                ))
            else:
                # –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                rows = (await s.execute(
                    select(Response.response_text)
                    .where(Response.question_id == q.id)
                )).scalars().all()
                stats.append((q.question_text, [(r,) for r in rows]))

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞ ¬´{poll.title}¬ª\n"]
    for question, rows in stats:
        lines.append(f"<b>{question}</b>")
        for row in rows:
            if len(row) == 3:
                ans, cnt, pct = row
                lines.append(f"‚Ä¢ {ans}: {cnt} ({pct:.1f}%)")
            else:
                (resp,) = row
                lines.append(f"‚Äì {resp}")
        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
    text = "\n".join(lines)

    kb2 = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV", callback_data=f"export_{poll.id}")
    )

    await state.finish()
    await query.message.edit_text(text, reply_markup=kb2, disable_web_page_preview=True)
    await query.answer()

async def export_csv(query: types.CallbackQuery):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV (UTF-8+BOM) —Å–æ –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏.
    """
    poll_id = int(query.data.split("_", 1)[1])

    async with AsyncSessionLocal() as s:
        poll = (await s.execute(
            select(Poll).where(Poll.id == poll_id)
        )).scalar_one_or_none()
        if not poll:
            return await query.answer("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerow(["–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç/–û—Ç–≤–µ—Ç—á–∏–∫", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–æ—Ü–µ–Ω—Ç"])

        questions = (await s.execute(
            select(Question).where(Question.poll_id == poll_id)
        )).scalars().all()

        for q in questions:
            if q.question_type != "text":
                rows = (await s.execute(
                    select(
                        Answer.answer_text,
                        func.coalesce(func.count(Response.id), 0).label("cnt")
                    )
                    .outerjoin(Response, Response.answer_id == Answer.id)
                    .where(Answer.question_id == q.id)
                    .group_by(Answer.answer_text)
                )).all()
                total = sum(cnt for _, cnt in rows) or 1
                for ans, cnt in rows:
                    pct = cnt / total * 100
                    writer.writerow([q.question_text, ans, cnt, f"{pct:.1f}%"])
            else:
                text_rows = (await s.execute(
                    select(Response.user_id, Response.response_text)
                    .where(Response.question_id == q.id)
                )).all()
                if not text_rows:
                    writer.writerow([q.question_text, "-", "-", "-"])
                else:
                    for user_id, resp in text_rows:
                        writer.writerow([q.question_text, user_id, resp, "-"])

    # –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel
    bom = '\ufeff'.encode('utf-8')
    bio = io.BytesIO(bom + output.getvalue().encode('utf-8'))
    bio.name = f"{poll.title}.csv"

    await query.message.answer_document(InputFile(bio, bio.name))
    await query.answer("üìÅ CSV –≥–æ—Ç–æ–≤!", show_alert=True)

def register_poll_statistics(dp: Dispatcher):
    dp.register_message_handler(
        start_stats,
        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        state=None
    )
    dp.register_callback_query_handler(
        poll_stats_callback,
        lambda c: c.data.startswith("stat_"),
        state=StatStates.choosing_poll
    )
    dp.register_callback_query_handler(
        poll_stats_callback,
        lambda c: c.data == "stat_back"
    )
    dp.register_callback_query_handler(
        export_csv,
        lambda c: c.data.startswith("export_")
    )
