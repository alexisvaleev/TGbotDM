# handlers/poll_statistics.py

from collections import Counter
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import User, Poll, Question, Answer, UserAnswer
from handlers.common import BACK, BACK_BTN
from handlers.back import return_to_main_menu

class StatsStates(StatesGroup):
    choosing_poll = State()

async def start_stats(message: types.Message, state: FSMContext):
    """–®–∞–≥ 1. –ê–¥–º–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    tg = message.from_user.id
    async with AsyncSessionLocal() as s:
        user = (await s.execute(
            select(User).where(User.tg_id == tg)
        )).scalar_one_or_none()

    if not user or user.role != "admin":
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

    # –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as s:
        polls = (await s.execute(select(Poll))).scalars().all()

    if not polls:
        return await message.answer("–ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=BACK_BTN)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    await state.update_data(poll_ids=[p.id for p in polls])
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i, p in enumerate(polls, 1):
        kb.add(types.KeyboardButton(f"{i}. {p.title}"))
    kb.add(BACK_BTN)

    await StatsStates.choosing_poll.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)

async def choose_poll_stats(message: types.Message, state: FSMContext):
    """–®–∞–≥ 2. –°–æ–±–∏—Ä–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    text = message.text.strip()
    if text == BACK:
        await state.finish()
        return await return_to_main_menu(message)

    data = await state.get_data()
    ids = data.get("poll_ids", [])
    if ". " not in text or not text.split(".")[0].isdigit():
        return await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –æ–ø—Ä–æ—Å–∞.")
    idx = int(text.split(".")[0]) - 1
    if idx < 0 or idx >= len(ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")

    poll_id = ids[idx]

    # –≥—Ä—É–∑–∏–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    async with AsyncSessionLocal() as s:
        qs = (await s.execute(
            select(Question).where(Question.poll_id == poll_id)
        )).scalars().all()

    if not qs:
        await state.finish()
        return await message.answer("–í —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=BACK_BTN)

    out_lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞ #{poll_id}:\n"]
    async with AsyncSessionLocal() as s:
        for q in qs:
            out_lines.append(f"üîπ {q.question_text}")
            # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            uas = (await s.execute(
                select(UserAnswer).where(UserAnswer.question_id == q.id)
            )).scalars().all()
            total = len(uas)
            if q.question_type == "single_choice":
                # –ø–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                opts = (await s.execute(
                    select(Answer).where(Answer.question_id == q.id)
                )).scalars().all()
                cnt = Counter([ua.answer_text for ua in uas])

                for opt in opts:
                    c = cnt.get(opt.answer_text, 0)
                    pct = (c / total * 100) if total else 0
                    out_lines.append(f"    ‚Ä¢ {opt.answer_text}: {c}/{total} ({pct:.1f}%)")
            else:
                # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –æ—Ç–≤–µ—Ç–æ–≤
                out_lines.append(f"    ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total}")
            out_lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏

    await state.finish()
    await message.answer("\n".join(out_lines), reply_markup=BACK_BTN)

def register_poll_statistics(dp: Dispatcher):
    dp.register_message_handler(start_stats,
                                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                state="*")
    dp.register_message_handler(choose_poll_stats,
                                state=StatsStates.choosing_poll)
