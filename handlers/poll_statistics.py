# handlers/poll_statistics.py

from collections import Counter
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import User, Poll, Question, Answer, UserAnswer
from handlers.common import BACK, BACK_BTN
from handlers.back import return_to_main_menu


class StatsStates(StatesGroup):
    choosing_poll = State()


async def start_stats(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.
    –¢–æ–ª—å–∫–æ admin –∏ teacher –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å.
    """
    await state.finish()
    tg = message.from_user.id

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    async with AsyncSessionLocal() as s:
        me = (await s.execute(
            select(User).where(User.tg_id == tg)
        )).scalar_one_or_none()

    if not me or me.role not in ("admin", "teacher"):
        return await message.answer(
            "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        )

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as s:
        polls = (await s.execute(select(Poll))).scalars().all()

    if not polls:
        return await message.answer("üö´ –ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=BACK_BTN)

    # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for idx, p in enumerate(polls, start=1):
        kb.add(KeyboardButton(f"{idx}. {p.title}"))
    kb.add(BACK_BTN)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ id –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ state
    await state.update_data(poll_ids=[p.id for p in polls])
    await StatsStates.choosing_poll.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)


async def choose_poll_stats(message: types.Message, state: FSMContext):
    """
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ä–æ—Å–∞ —Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    text = message.text.strip()
    if text == BACK:
        await state.finish()
        return await return_to_main_menu(message)

    data = await state.get_data()
    poll_ids = data.get("poll_ids", [])
    parts = text.split(".", 1)
    if not parts[0].isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –æ–ø—Ä–æ—Å–∞.")
    idx = int(parts[0]) - 1
    if idx < 0 or idx >= len(poll_ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞.")

    poll_id = poll_ids[idx]

    # —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞: {poll_id}\n"]
    async with AsyncSessionLocal() as s:
        questions = (await s.execute(
            select(Question).where(Question.poll_id == poll_id)
        )).scalars().all()

        for q in questions:
            lines.append(f"üîπ {q.question_text}")
            answers = (await s.execute(
                select(UserAnswer).where(UserAnswer.question_id == q.id)
            )).scalars().all()
            total = len(answers)

            # –≤–∞—Ä–∏–∞–Ω—Ç—ã
            opts = (await s.execute(
                select(Answer).where(Answer.question_id == q.id)
            )).scalars().all()

            if opts:
                cnt = Counter(a.answer_text for a in answers)
                for o in opts:
                    c = cnt.get(o.answer_text, 0)
                    pct = (c / total * 100) if total else 0
                    lines.append(f"    ‚Ä¢ {o.answer_text}: {c}/{total} ({pct:.1f}%)")
            else:
                lines.append(f"    ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {total}")
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
    await state.finish()
    await message.answer("\n".join(lines), reply_markup=ReplyKeyboardRemove())
    return await return_to_main_menu(message)


def register_poll_statistics(dp: Dispatcher):
    dp.register_message_handler(start_stats, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", state="*")
    dp.register_message_handler(choose_poll_stats, state=StatsStates.choosing_poll)
