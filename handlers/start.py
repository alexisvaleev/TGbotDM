# handlers/start.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.future import select

from config import load_config
from database import AsyncSessionLocal
from models import User, Group

config = load_config()

class SettingGroup(StatesGroup):
    waiting_for_group = State()


async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    tg_id = message.from_user.id

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with AsyncSessionLocal() as ses:
        user = (await ses.execute(
            select(User).where(User.tg_id == tg_id)
        )).scalar_one_or_none()
        if not user:
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
            if   tg_id in config.ADMIN_IDS:
                role = "admin"
            elif tg_id in config.TEACHER_IDS:
                role = "teacher"
            elif tg_id in config.STUDENT_IDS:
                role = "student"
            else:
                role = "unknown"
            user = User(tg_id=tg_id, role=role)
            ses.add(user)
            await ses.commit()

    # 2) –ï—Å–ª–∏ teacher/student –±–µ–∑ –≥—Ä—É–ø–ø—ã ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É
    if user.role in ("teacher","student") and not user.group_id:
        async with AsyncSessionLocal() as ses2:
            groups = (await ses2.execute(select(Group))).scalars().all()
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for g in groups:
            kb.add(KeyboardButton(g.name))
        await SettingGroup.waiting_for_group.set()
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=kb)

    # 3) –ò–Ω–∞—á–µ ‚Äî —Ä–∏—Å—É–µ–º –º–µ–Ω—é
    return await _send_main_menu(message, user.role)


async def process_group_choice(message: types.Message, state: FSMContext):
    tg_id = message.from_user.id
    choice = message.text.strip()

    async with AsyncSessionLocal() as ses:
        grp = (await ses.execute(
            select(Group).where(Group.name == choice)
        )).scalar_one_or_none()
        if not grp:
            return await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.")
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        await ses.execute(
            User.__table__.update()
            .where(User.tg_id == tg_id)
            .values(group_id=grp.id)
        )
        await ses.commit()

    await state.finish()
    await message.answer(f"–ì—Ä—É–ø–ø–∞ ¬´{grp.name}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    # –∑–∞–Ω–æ–≤–æ —Ä–∏—Å—É–µ–º –º–µ–Ω—é
    async with AsyncSessionLocal() as ses2:
        user = (await ses2.execute(
            select(User).where(User.tg_id == tg_id)
        )).scalar_one()
    return await _send_main_menu(message, user.role)


async def _send_main_menu(message: types.Message, role: str):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)

    if role == "admin":
        kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
        kb.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
        kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))

    elif role == "teacher":
        kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
        kb.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
        kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
        kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))

    elif role == "student":
        kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))

    else:  # unknown
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")

    return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


def register_start_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    dp.register_message_handler(process_group_choice, state=SettingGroup.waiting_for_group)
