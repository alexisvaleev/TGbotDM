from dotenv import load_dotenv
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import User, Group
from config import ADMIN_IDS, TEACHER_IDS, STUDENT_IDS

load_dotenv()

class SettingGroup(StatesGroup):
    waiting_for_group = State()

async def add_users_to_db(dp):
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤/—É—á–∏—Ç–µ–ª–µ–π/—Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ .env, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ë–î
    async with AsyncSessionLocal() as session:
        existing = {u.tg_id for u in (await session.execute(select(User))).scalars().all()}
        all_users = {(tg, 'admin') for tg in ADMIN_IDS} | \
                    {(tg, 'teacher') for tg in TEACHER_IDS} | \
                    {(tg, 'student') for tg in STUDENT_IDS}

        for tg_id, role in all_users:
            if tg_id not in existing:
                session.add(User(tg_id=tg_id, role=role))
        await session.commit()

async def cmd_start(message: types.Message, state: FSMContext):
    tg_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar()

        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if tg_id in ADMIN_IDS:
                role = "admin"
            elif tg_id in TEACHER_IDS:
                role = "teacher"
            elif tg_id in STUDENT_IDS:
                role = "student"
            else:
                role = "unknown"
            user = User(tg_id=tg_id, role=role)
            session.add(user)
            await session.commit()

        # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç/—É—á–∏—Ç–µ–ª—å –∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—ë
        if user.role in ("student", "teacher") and not user.group_id:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –ë–î
            groups = (await session.execute(select(Group))).scalars().all()
            kb = ReplyKeyboardMarkup(resize_keyboard=True)
            for g in groups:
                kb.add(KeyboardButton(g.name))
            await state.set_state(SettingGroup.waiting_for_group.state)
            return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=kb)

        # –ò–Ω–∞—á–µ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await _send_main_menu(message, user.role)


async def process_group_choice(message: types.Message, state: FSMContext):
    tg_id = message.from_user.id
    chosen = message.text.strip()
    async with AsyncSessionLocal() as session:
        # –Ω–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É
        result = await session.execute(select(Group).where(Group.name == chosen))
        group = result.scalar()
        if not group:
            return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await session.execute(
            User.__table__.update()
            .where(User.tg_id == tg_id)
            .values(group_id=group.id)
        )
        await session.commit()
    await state.finish()
    await message.answer(f"–ì—Ä—É–ø–ø–∞ ¬´{group.name}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    # —É–∑–Ω–∞—ë–º —Ä–æ–ª—å
    async with AsyncSessionLocal() as session2:
        user = (await session2.execute(select(User).where(User.tg_id == tg_id))).scalar()
    await _send_main_menu(message, user.role)


async def _send_main_menu(message: types.Message, role: str):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    if role == "admin":
        # kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
        kb.add(KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
        kb.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"))
        # kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    elif role in ("teacher", "student"):

        kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))
    else:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
