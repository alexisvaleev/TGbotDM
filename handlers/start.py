# handlers/start.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import User, Group
from config import ADMIN_IDS, TEACHER_IDS, STUDENT_IDS


class SettingGroup(StatesGroup):
    waiting_for_group = State()


async def add_users_to_db(dp: Dispatcher):
    async with AsyncSessionLocal() as session:
        users = (await session.execute(select(User))).scalars().all()
        for u in users:
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ä–æ–ª—å –ø–æ .env
            if u.tg_id in ADMIN_IDS:
                real_role = "admin"
            elif u.tg_id in TEACHER_IDS:
                real_role = "teacher"
            elif u.tg_id in STUDENT_IDS:
                real_role = "student"
            else:
                real_role = u.role  # –∏–ª–∏ "unknown"
            # –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
            if u.role != real_role:
                await session.execute(
                    User.__table__.update()
                    .where(User.id == u.id)
                    .values(role=real_role)
                )
        # —Ç–µ–ø–µ—Ä—å –∑–∞–≤–æ–¥–∏–º –Ω–æ–≤—ã—Ö, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        existing_ids = {u.tg_id for u in users}
        all_ids = set(ADMIN_IDS) | set(TEACHER_IDS) | set(STUDENT_IDS)
        for tg in all_ids - existing_ids:
            role = ("admin" if tg in ADMIN_IDS else
                    "teacher" if tg in TEACHER_IDS else
                    "student")
            session.add(User(tg_id=tg, role=role))
        await session.commit()



async def cmd_start(message: types.Message, state: FSMContext):
    """/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É –∏–ª–∏ —Ä–∏—Å—É–µ–º –º–µ–Ω—é."""
    await state.finish()
    tg = message.from_user.id

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    async with AsyncSessionLocal() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg))).scalar()
        if not user:
            # —Ä–æ–ª—å –∏–∑ .env
            if   tg in ADMIN_IDS:   role = "admin"
            elif tg in TEACHER_IDS: role = "teacher"
            elif tg in STUDENT_IDS: role = "student"
            else:                   role = "unknown"
            user = User(tg_id=tg, role=role)
            session.add(user)
            await session.commit()

    # –ï—Å–ª–∏ —É—á–∏—Ç–µ–ª—å/—Å—Ç—É–¥–µ–Ω—Ç –∏ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É
    if user.role in ("teacher", "student") and not user.group_id:
        async with AsyncSessionLocal() as session:
            groups = (await session.execute(select(Group))).scalars().all()
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for g in groups:
            kb.add(KeyboardButton(g.name))
        await SettingGroup.waiting_for_group.set()
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=kb)

    # –ò–Ω–∞—á–µ —Å—Ä–∞–∑—É –º–µ–Ω—é
    return await _send_main_menu(message, user.role)


async def process_group_choice(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ —Ä–∏—Å—É–µ–º –º–µ–Ω—é."""
    tg = message.from_user.id
    choice = message.text.strip()

    async with AsyncSessionLocal() as session:
        grp = (await session.execute(
            select(Group).where(Group.name == choice)
        )).scalar()
        if not grp:
            return await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.")
        # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await session.execute(
            User.__table__.update()
            .where(User.tg_id == tg)
            .values(group_id=grp.id)
        )
        await session.commit()

    await state.finish()
    await message.answer(f"–ì—Ä—É–ø–ø–∞ ¬´{grp.name}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    # –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–∏—Ç–∞–µ–º —Ä–æ–ª—å, —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ–µ –º–µ–Ω—é
    async with AsyncSessionLocal() as session2:
        user = (await session2.execute(select(User).where(User.tg_id == tg))).scalar()
    return await _send_main_menu(message, user.role)


async def _send_main_menu(message: types.Message, role: str):
    """
    –†–∏—Å—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏:
      - admin   ‚Üí –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—ç–∫—Å–ø–æ—Ä—Ç–∞
      - teacher ‚Üí –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
      - student ‚Üí –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    if role == "admin":
        kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
        kb.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
    elif role == "teacher":
        kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))
    elif role == "student":
        kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))
    else:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")

    return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


def register_start_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    dp.register_message_handler(process_group_choice, state=SettingGroup.waiting_for_group)
