from aiogram import types
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher import FSMContext
from config import load_config
from database import AsyncSessionLocal
from models import User
from sqlalchemy.future import select
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os
from dotenv import load_dotenv

load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤, —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —É—á–∏—Ç–µ–ª–µ–π –∏–∑ .env
ADMIN_IDS = set(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else set()
STUDENT_IDS = set(map(int, os.getenv("STUDENT_IDS", "").split(","))) if os.getenv("STUDENT_IDS") else set()
TEACHER_IDS = set(map(int, os.getenv("TEACHER_IDS", "").split(","))) if os.getenv("TEACHER_IDS") else set()


def get_user_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))
    return kb


async def cmd_start(message: types.Message, state: FSMContext):
    print(f"üì• /start –æ—Ç: {message.from_user.id}")
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar()

        if user:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.role.capitalize()} ‚úÖ")
        else:
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if user_id in ADMIN_IDS:
                role = "admin"
            elif user_id in STUDENT_IDS:
                role = "student"
            elif user_id in TEACHER_IDS:
                role = "teacher"
            else:
                role = "unknown"  # –µ—Å–ª–∏ –Ω–µ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–æ–ª—å unknown

            user = User(tg_id=user_id, role=role)
            session.add(user)
            await session.commit()
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role.capitalize()} ‚úÖ")

        # –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.role == "admin":
            kb = ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
            kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
            kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        elif user.role == "student" or user.role == "teacher":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç/—É—á–∏—Ç–µ–ª—å
            kb = ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))
            print(f"User role: {user.role}, button added")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        else:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
