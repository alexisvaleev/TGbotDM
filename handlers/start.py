# handlers/start.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import User, Group
from config import ADMIN_IDS, TEACHER_IDS, STUDENT_IDS

class SettingGroup(StatesGroup):
    waiting_for_group = State()

async def add_users_to_db(dp: Dispatcher):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ .env —Å –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    async with AsyncSessionLocal() as session:
        users = (await session.execute(select(User))).scalars().all()
        # –≤–∞—à –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö
        # (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def cmd_start(message: types.Message, state: FSMContext):
    """/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É –∏–ª–∏ —Ä–∏—Å—É–µ–º –º–µ–Ω—é."""
    await state.finish()
    tg = message.from_user.id

    # 1) –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
    async with AsyncSessionLocal() as session:
        user = (await session.execute(
            select(User).where(User.tg_id == tg)
        )).scalar()
        if not user:
            # —Ä–æ–ª—å –∏–∑ .env
            if   tg in ADMIN_IDS:   role = "admin"
            elif tg in TEACHER_IDS: role = "teacher"
            elif tg in STUDENT_IDS: role = "student"
            else:                   role = "unknown"
            user = User(tg_id=tg, role=role)
            session.add(user)
            await session.commit()

    # 2) –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å/—Å—Ç—É–¥–µ–Ω—Ç –∏ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É
    if user.role in ("teacher", "student") and not user.group_id:
        async with AsyncSessionLocal() as session:
            groups = (await session.execute(select(Group))).scalars().all()

        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for g in groups:
            kb.add(KeyboardButton(g.name))

        await SettingGroup.waiting_for_group.set()
        return await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            reply_markup=kb
        )

    # 3) –ò–Ω–∞—á–µ ‚Äî —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await _send_main_menu(message, user.role)


async def process_group_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ /start."""
    tg = message.from_user.id
    choice = message.text.strip()

    async with AsyncSessionLocal() as session:
        grp = (await session.execute(
            select(Group).where(Group.name == choice)
        )).scalar()
        if not grp:
            return await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_id
        await session.execute(
            User.__table__.update()
            .where(User.tg_id == tg)
            .values(group_id=grp.id)
        )
        await session.commit()

    await state.finish()
    await message.answer(f"–ì—Ä—É–ø–ø–∞ ¬´{grp.name}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    # –ï—â—ë —Ä–∞–∑ —á–∏—Ç–∞–µ–º —Ä–æ–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async with AsyncSessionLocal() as session2:
        user = (await session2.execute(
            select(User).where(User.tg_id == tg)
        )).scalar()
    return await _send_main_menu(message, user.role)


async def _send_main_menu(message: types.Message, role: str):
    """–†–∏—Å—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏. –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É¬ª. """
    kb = ReplyKeyboardMarkup(resize_keyboard=True)

    if role == "admin":
        kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
        kb.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
        kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))

    elif role == "teacher":
        kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
        kb.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
        kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
        kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))

    else:  # student –∏–ª–∏ unknown
        kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))

    return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


def register_start_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    dp.register_message_handler(process_group_choice, state=SettingGroup.waiting_for_group)
