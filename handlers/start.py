import os
from dotenv import load_dotenv

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import User
from config import ADMIN_IDS, TEACHER_IDS, STUDENT_IDS

load_dotenv()

async def add_users_to_db(dp):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ—Ö tg_id –∏–∑ ADMIN_IDS, TEACHER_IDS, STUDENT_IDS –≤ —Ç–∞–±–ª–∏—Ü—É users.
    """
    print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ add_users_to_db()")
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User))
        existing = {u.tg_id for u in result.scalars().all()}

        all_users = {
            (tg, 'admin') for tg in ADMIN_IDS
        } | {
            (tg, 'teacher') for tg in TEACHER_IDS
        } | {
            (tg, 'student') for tg in STUDENT_IDS
        }

        for tg_id, role in all_users:
            if tg_id not in existing:
                user = User(tg_id=tg_id, role=role)
                session.add(user)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} ‚Üí —Ä–æ–ª—å {role}")

        await session.commit()
        print("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ .env –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î")


async def cmd_start(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç),
    –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–ª—å –∏ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏.
    """
    tg_id = message.from_user.id
    print(f"üì• /start –æ—Ç: {tg_id}")

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
        if not user:
            if tg_id in ADMIN_IDS:
                role = "admin"
            elif tg_id in TEACHER_IDS:
                role = "teacher"
            elif tg_id in STUDENT_IDS:
                role = "student"
            else:
                role = "unknown"

            user = User(tg_id=tg_id, role=role)
            session.add(user)
            await session.commit()
            print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} ‚Üí {role}")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, –≤—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.role.capitalize()} ‚úÖ")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        if user.role == "admin":
            kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
            kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
            kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
        elif user.role in ("teacher", "student"):
            kb.add(KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))
        else:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            return

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
