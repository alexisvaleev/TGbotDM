import logging
from typing import Optional
from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import User
from handlers.common           import BACK
from handlers.user_management  import cmd_view_users, start_add_user
from handlers.group_management import start_group_creation, start_group_assignment
from handlers.poll_creation    import start_poll_creation
from handlers.poll_editor      import start_poll_editor
from handlers.poll_management  import start_delete_poll
from handlers.poll_statistics  import start_stats
from handlers.poll_take        import start_take_poll

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
USERS_BTN   = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
POLLS_BTN   = "üìù –û–ø—Ä–æ—Å—ã"
GROUPS_BTN  = "üè∑ –ì—Ä—É–ø–ø—ã"
REPORTS_BTN = "üìà –û—Ç—á—ë—Ç—ã"

async def _get_role(tg: int) -> Optional[str]:
    async with AsyncSessionLocal() as s:
        me = (await s.execute(select(User).where(User.tg_id == tg))).scalar_one_or_none()
    return me.role if me else None

async def send_main_menu(message: types.Message):
    role = await _get_role(message.from_user.id)
    kb   = ReplyKeyboardMarkup(resize_keyboard=True)

    if role == "admin":
        kb.add(USERS_BTN, POLLS_BTN).add(GROUPS_BTN, REPORTS_BTN)
    elif role == "teacher":
        kb.add(USERS_BTN, POLLS_BTN).add(GROUPS_BTN, "üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
    else:
        kb.add("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")

    logging.info(f"send_main_menu: role={role}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)

async def route_menu(message: types.Message):
    txt = message.text.strip()
    logging.info(f"route_menu got: {txt!r}")

    # ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí
    if txt == USERS_BTN:
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π","‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è","‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è").add(BACK)
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=kb)

    if txt == POLLS_BTN:
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å","‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å").add("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å", BACK)
        return await message.answer("–û–ø—Ä–æ—Å—ã:", reply_markup=kb)

    if txt == GROUPS_BTN:
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É","üîÄ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É").add(BACK)
        return await message.answer("–ì—Ä—É–ø–ø—ã:", reply_markup=kb)

    if txt == REPORTS_BTN:
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").add(BACK)
        return await message.answer("–û—Ç—á—ë—Ç—ã:", reply_markup=kb)

    # ‚Äî –ø–æ–¥–º–µ–Ω—é –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Üí
    if txt == "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        return await cmd_view_users(message)
    if txt in ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è","‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        return await start_add_user(message, None)

    # ‚Äî –ø–æ–¥–º–µ–Ω—é –ì—Ä—É–ø–ø—ã ‚Üí
    if txt == "‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É":
        return await start_group_creation(message, None)
    if txt == "üîÄ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É":
        return await start_group_assignment(message, None)

    # ‚Äî –ø–æ–¥–º–µ–Ω—é –û–ø—Ä–æ—Å—ã ‚Üí
    if txt == "‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å":
        return await start_poll_creation(message, None)
    if txt == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å":
        return await start_poll_editor(message, None)
    if txt == "üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å":
        return await start_delete_poll(message, None)

    # ‚Äî –ø–æ–¥–º–µ–Ω—é –û—Ç—á—ë—Ç—ã ‚Üí
    if txt == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await start_stats(message, None)

    # ‚Äî —Å—Ç—É–¥–µ–Ω—Ç—ã: –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å ‚Üí
    if txt == "üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å":
        return await start_take_poll(message, None)

    # –Ω–∞–∑–∞–¥
    if txt == BACK:
        return await send_main_menu(message)

    # –∏–Ω–∞—á–µ ‚Äì –∏–≥–Ω–æ—Ä
    logging.info("route_menu: no match")
    return

def register_menu(dp: Dispatcher):
    dp.register_message_handler(
        route_menu,
        content_types=types.ContentTypes.TEXT,
        state=None
    )

