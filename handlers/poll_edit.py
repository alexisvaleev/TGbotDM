# handlers/poll_edit.py
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.future import select
from database import AsyncSessionLocal
from models import Poll, Group, User

class EditPollStates(StatesGroup):
    choosing_poll   = State()  # –≤—ã–±–∏—Ä–∞–µ–º –æ–ø—Ä–æ—Å
    choosing_field  = State()  # –≤—ã–±–∏—Ä–∞–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–º
    editing_title   = State()  # –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    editing_target  = State()  # –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    editing_group   = State()  # –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã


async def start_edit_poll(message: types.Message, state: FSMContext):
    """–®–∞–≥ 1. –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª ¬´‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å¬ª."""
    tg_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    async with AsyncSessionLocal() as session:
        user = (await session.execute(
            select(User).where(User.tg_id == tg_id)
        )).scalar()
    if not user or user.role != "admin":
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã.")
    # –ë–µ—Ä—ë–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as session:
        polls = (await session.execute(select(Poll))).scalars().all()
    if not polls:
        return await message.answer("–ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await state.update_data(poll_ids=[p.id for p in polls])
    text = "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" + "\n".join(
        f"{i+1}. {p.title}" for i, p in enumerate(polls)
    )
    await state.set_state(EditPollStates.choosing_poll)
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

async def choose_edit_poll(message: types.Message, state: FSMContext):
    """–®–∞–≥ 2. –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    data = await state.get_data()
    poll_ids = data.get("poll_ids", [])
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞ —Ü–∏—Ñ—Ä–æ–π.")
    idx = int(message.text) - 1
    if idx < 0 or idx >= len(poll_ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    poll_id = poll_ids[idx]
    await state.update_data(edit_poll_id=poll_id)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º –ø—Ä–∞–≤–∏—Ç—å
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üî§ –ù–∞–∑–≤–∞–Ω–∏–µ"))
    kb.add(KeyboardButton("üë• –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è"))
    kb.add(KeyboardButton("üè∑ –ì—Ä—É–ø–ø–∞"))
    kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    await state.set_state(EditPollStates.choosing_field)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)

async def choose_edit_field(message: types.Message, state: FSMContext):
    """–®–∞–≥ 3. –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–ª–µ."""
    text = message.text.strip()
    if text == "üî§ –ù–∞–∑–≤–∞–Ω–∏–µ":
        await state.set_state(EditPollStates.editing_title)
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardRemove())
    if text == "üë• –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è":
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("teacher"), KeyboardButton("student"), KeyboardButton("–≤—Å–µ"))
        await state.set_state(EditPollStates.editing_target)
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=kb)
    if text == "üè∑ –ì—Ä—É–ø–ø–∞":
        # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        async with AsyncSessionLocal() as session:
            groups = (await session.execute(select(Group))).scalars().all()
        if not groups:
            return await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for g in groups:
            kb.add(KeyboardButton(g.name))
        kb.add(KeyboardButton("‚ùå –ë–µ–∑ –≥—Ä—É–ø–ø—ã"))
        await state.set_state(EditPollStates.editing_group)
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ–ø—Ä–æ—Å–∞:", reply_markup=kb)
    # –û—Ç–º–µ–Ω–∞
    await state.finish()
    await return_to_admin_menu(message)
    await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())

async def process_edit_title(message: types.Message, state: FSMContext):
    """–®–∞–≥ 4–∞. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    new_title = message.text.strip()
    data = await state.get_data()
    poll_id = data["edit_poll_id"]
    async with AsyncSessionLocal() as session:
        await session.execute(
            Poll.__table__
            .update().where(Poll.id == poll_id)
            .values(title=new_title)
        )
        await session.commit()
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await state.finish()
    await return_to_admin_menu(message)


async def process_edit_target(message: types.Message, state: FSMContext):
    """–®–∞–≥ 4–±. –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é."""
    new_target = message.text.strip()
    if new_target not in ("teacher", "student", "–≤—Å–µ"):
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    data = await state.get_data()
    poll_id = data["edit_poll_id"]
    async with AsyncSessionLocal() as session:
        await session.execute(
            Poll.__table__
            .update().where(Poll.id == poll_id)
            .values(target_role=new_target)
        )
        await session.commit()
    await message.answer("‚úÖ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await state.finish()
    await return_to_admin_menu(message)


async def process_edit_group(message: types.Message, state: FSMContext):
    """–®–∞–≥ 4–≤. –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É."""
    choice = message.text.strip()
    async with AsyncSessionLocal() as session:
        if choice == "‚ùå –ë–µ–∑ –≥—Ä—É–ø–ø—ã":
            new_group = None
        else:
            grp = (await session.execute(
                select(Group).where(Group.name == choice)
            )).scalar()
            if not grp:
                return await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã.")
            new_group = grp.id
        data = await state.get_data()
        poll_id = data["edit_poll_id"]
        await session.execute(
            Poll.__table__
            .update().where(Poll.id == poll_id)
            .values(group_id=new_group)
        )
        await session.commit()

    await message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await state.finish()
    await return_to_admin_menu(message)

async def return_to_admin_menu(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞."""
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
    kb.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
    kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

def register_poll_edit(dp: Dispatcher):
    dp.register_message_handler(start_edit_poll, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å", state="*")
    dp.register_message_handler(choose_edit_poll, state=EditPollStates.choosing_poll)
    dp.register_message_handler(choose_edit_field, state=EditPollStates.choosing_field)
    dp.register_message_handler(process_edit_title, state=EditPollStates.editing_title)
    dp.register_message_handler(process_edit_target, state=EditPollStates.editing_target)
    dp.register_message_handler(process_edit_group, state=EditPollStates.editing_group)
