from sqlalchemy.future import select
from aiogram import Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database import AsyncSessionLocal
from models import Group
from handlers.common import BACK, BACK_BTN
from handlers.back   import return_to_main_menu
from aiogram import types

# –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç—ã aiogram, FSMContext –∏ —Ç. –ø.

async def start_group_creation(message: types.Message, state):
    # TODO: –≤–∞—à –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    await message.answer("–ó–¥–µ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è FSM —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã")

async def start_group_assignment(message: types.Message, state):
    # TODO: –≤–∞—à –∫–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
    await message.answer("–ó–¥–µ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è FSM –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É")

def register_group_management(dp: Dispatcher):
    dp.register_message_handler(start_group_creation,
                                text="‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", state="*")
    dp.register_message_handler(start_group_assignment,
                                text="üîÄ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É", state="*")
    # ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ FSM ‚Ä¶


async def seed_groups():
    """
    –°–µ–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ .env ‚Üí GROUP_NAMES
    """
    from config import load_config
    cfg = load_config()
    if not cfg.GROUP_NAMES:
        return

    async with AsyncSessionLocal() as s:
        existing = {g.name for g in (await s.execute(select(Group))).scalars().all()}
        for name in cfg.GROUP_NAMES:
            if name not in existing:
                s.add(Group(name=name))
        await s.commit()

# ‚Üì –Ω–∏–∂–µ –≤–∞—à–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
def register_group_management(dp: Dispatcher):
    # dp.register_message_handler(start_group_creation, text="‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
    # dp.register_message_handler(process_group_name, state=GroupCreationStates.name)
    # ...
    pass
