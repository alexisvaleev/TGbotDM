# handlers/poll_take.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy import select, update
from database import AsyncSessionLocal
from models import User, Poll, Question, Answer, UserAnswer, UserPollProgress


class StudentPollStates(StatesGroup):
    choosing_poll = State()    # –∂–¥—ë–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –≤—ã–±–µ—Ä–µ—Ç –æ–ø—Ä–æ—Å
    answering     = State()    # –∂–¥—ë–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞–∂–º—ë—Ç –∫–Ω–æ–ø–∫—É-–æ—Ç–≤–µ—Ç


async def start_poll_taking(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å'. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤."""
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await message.answer("–ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã‚Ä¶", reply_markup=ReplyKeyboardRemove())

    tg_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalar()
        if not user:
            return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")

        polls = (await session.execute(
            select(Poll).where(
                (Poll.target_role == user.role) | (Poll.target_role == "–≤—Å–µ"),
                (Poll.group_id.is_(None)) | (Poll.group_id == user.group_id)
            )
        )).scalars().all()

    if not polls:
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i, p in enumerate(polls, 1):
        kb.add(KeyboardButton(f"{i}. {p.title}"))

    await state.update_data(poll_ids=[p.id for p in polls])
    await state.set_state(StudentPollStates.choosing_poll)
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å:", reply_markup=kb)


async def choose_poll(message: types.Message, state: FSMContext):
    """–°—Ç—É–¥–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –æ–ø—Ä–æ—Å. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∑–∞–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å."""
    data = await state.get_data()
    poll_ids = data.get("poll_ids", [])

    text = message.text.split(".")[0]
    if not text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –æ–ø—Ä–æ—Å–∞.")
    idx = int(text) - 1
    if idx < 0 or idx >= len(poll_ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

    poll_id = poll_ids[idx]

    tg_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalar()
        progress = UserPollProgress(
            user_id=user.id, poll_id=poll_id,
            last_question_id=None, is_completed=False
        )
        session.add(progress)
        await session.commit()

    await state.update_data(poll_id=poll_id, progress_id=progress.id, q_index=0)
    await _ask_question(message, state)


async def _ask_question(message: types.Message, state: FSMContext):
    """–í—ã–¥–∞—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞."""
    data = await state.get_data()
    poll_id = data["poll_id"]
    q_index = data["q_index"]

    async with AsyncSessionLocal() as session:
        questions = (await session.execute(select(Question).where(Question.poll_id == poll_id))).scalars().all()

    if q_index >= len(questions):
        return await _finish_poll(message, state)

    question = questions[q_index]

    async with AsyncSessionLocal() as session:
        options = (await session.execute(select(Answer).where(Answer.question_id == question.id))).scalars().all()

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in options:
        kb.add(KeyboardButton(opt.answer_text))

    await state.set_state(StudentPollStates.answering)
    await message.answer(question.question_text, reply_markup=kb)


async def process_answer(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."""
    data = await state.get_data()
    poll_id     = data["poll_id"]
    progress_id = data["progress_id"]
    q_index     = data["q_index"]

    async with AsyncSessionLocal() as session:
        questions = (await session.execute(select(Question).where(Question.poll_id == poll_id))).scalars().all()
    question = questions[q_index]

    text = message.text.strip()
    async with AsyncSessionLocal() as session:
        valid = (await session.execute(select(Answer).where(
            Answer.question_id == question.id,
            Answer.answer_text == text
        ))).scalar()
    if not valid:
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

    tg_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalar()
        ua = UserAnswer(user_id=user.id, question_id=question.id, answer_text=text)
        session.add(ua)
        await session.execute(update(UserPollProgress).where(UserPollProgress.id == progress_id).values(last_question_id=question.id))
        await session.commit()

    await state.update_data(q_index=q_index + 1)
    await _ask_question(message, state)


async def _finish_poll(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞."""
    data = await state.get_data()
    progress_id = data["progress_id"]

    async with AsyncSessionLocal() as session:
        await session.execute(update(UserPollProgress).where(UserPollProgress.id == progress_id).values(is_completed=True))
        await session.commit()

    await message.answer("üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!", reply_markup=ReplyKeyboardRemove())
    await state.finish()


def register_poll_take(dp: Dispatcher):
    dp.register_message_handler(start_poll_taking, text="üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", state="*")
    dp.register_message_handler(choose_poll, state=StudentPollStates.choosing_poll)
    dp.register_message_handler(process_answer, state=StudentPollStates.answering)
