# handlers/poll_take.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from sqlalchemy import or_
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import (
    User,
    Poll,
    Question,
    Answer,
    UserPollProgress,
    UserAnswer
)
from handlers.common import BACK, BACK_BTN
from handlers.back import return_to_main_menu


class TakePollStates(StatesGroup):
    choosing_poll = State()
    answering     = State()


async def start_take_poll(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å."""
    await state.finish()
    tg_id = message.from_user.id

    # –≥—Ä—É–∑–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with AsyncSessionLocal() as s:
        me = (await s.execute(
            select(User).where(User.tg_id == tg_id)
        )).scalar_one_or_none()

    # —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –∏ —É—á–∏—Ç–µ–ª—è–º
    if not me or me.role not in ("student", "teacher"):
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã.")

    await message.answer("üîç –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã‚Ä¶")

    # –∏—â–µ–º –æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ:
    # ‚Äì —Ç–∞—Ä–≥–µ—Ç—è—Ç—Å—è –Ω–∞ —ç—Ç—É —Ä–æ–ª—å –∏–ª–∏ –Ω–∞ –≤—Å–µ—Ö
    # ‚Äì –∏ –ª–∏–±–æ –±–µ–∑ –≥—Ä—É–ø–ø—ã, –ª–∏–±–æ –Ω–∞ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with AsyncSessionLocal() as s:
        q = select(Poll).where(
            Poll.target_role.in_([me.role, "all"]),
            or_(Poll.group_id.is_(None), Poll.group_id == me.group_id)
        )
        polls = (await s.execute(q)).scalars().all()

        # –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ
        done = (await s.execute(
            select(UserPollProgress.poll_id).where(UserPollProgress.user_id == me.id)
        )).scalars().all()
    polls = [p for p in polls if p.id not in done]

    if not polls:
        return await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.", reply_markup=BACK_BTN)

    # —Ä–∏—Å—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i, p in enumerate(polls, start=1):
        kb.add(KeyboardButton(f"{i}. {p.title}"))
    kb.add(BACK_BTN)

    await state.update_data(poll_ids=[p.id for p in polls])
    await TakePollStates.choosing_poll.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å:", reply_markup=kb)


async def choose_poll_to_take(message: types.Message, state: FSMContext):
    data = await state.get_data()
    poll_ids = data.get("poll_ids", [])
    text = message.text.strip()

    if text == BACK:
        await state.finish()
        return await return_to_main_menu(message)
    if not text.split(".", 1)[0].isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–æ–π.", reply_markup=BACK_BTN)

    idx = int(text.split(".", 1)[0]) - 1
    if idx < 0 or idx >= len(poll_ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.", reply_markup=BACK_BTN)

    poll_id = poll_ids[idx]
    await state.update_data(chosen_poll=poll_id)

    # —Å—Ç–∞—Ä—Ç—É–µ–º –ø—Ä–æ—Ö–æ–¥
    return await _ask_next_question(message, state)


async def _ask_next_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    poll_id = data["chosen_poll"]
    tg_id   = message.from_user.id

    # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    async with AsyncSessionLocal() as s:
        me = (await s.execute(
            select(User).where(User.tg_id == tg_id)
        )).scalar_one()
        prog = (await s.execute(
            select(UserPollProgress).where(
                UserPollProgress.user_id == me.id,
                UserPollProgress.poll_id == poll_id
            )
        )).scalar_one_or_none()

        # –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º
        if not prog:
            prog = UserPollProgress(user_id=me.id, poll_id=poll_id, last_question_id=None)
            s.add(prog)
            await s.flush()

        # –∏—â–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å
        q = select(Question).where(Question.poll_id == poll_id)
        if prog.last_question_id:
            q = q.where(Question.id > prog.last_question_id)
        q = q.order_by(Question.id).limit(1)
        next_q = (await s.execute(q)).scalar_one_or_none()

        # –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ–º
        if not next_q:
            prog.is_completed = 1
            await s.commit()
            await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å!", reply_markup=ReplyKeyboardRemove())
            await state.finish()
            return await return_to_main_menu(message)

        # –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å
        prog.last_question_id = next_q.id
        await s.commit()

        # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if next_q.question_type == "single_choice":
            opts = (await s.execute(
                select(Answer).where(Answer.question_id == next_q.id)
            )).scalars().all()
            kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for o in opts:
                kb.add(KeyboardButton(o.answer_text))
            kb.add(BACK_BTN)
            await state.update_data(current_q=next_q.id)
            await TakePollStates.answering.set()
            return await message.answer(next_q.question_text, reply_markup=kb)

        # –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        await state.update_data(current_q=next_q.id)
        await TakePollStates.answering.set()
        return await message.answer(next_q.question_text, reply_markup=BACK_BTN)


async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    txt    = message.text.strip()
    q_id   = data.get("current_q")
    p_id   = data.get("chosen_poll")
    tg_id  = message.from_user.id

    # BACK?
    if txt == BACK:
        await state.finish()
        return await return_to_main_menu(message)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    async with AsyncSessionLocal() as s:
        me = (await s.execute(
            select(User).where(User.tg_id == tg_id)
        )).scalar_one()
        s.add(UserAnswer(user_id=me.id, question_id=q_id, answer_text=txt))
        await s.commit()

    # –∏ –∑–∞–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π
    return await _ask_next_question(message, state)


def register_poll_take(dp: Dispatcher):
    dp.register_message_handler(start_take_poll, text="üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", state="*")
    dp.register_message_handler(choose_poll_to_take, state=TakePollStates.choosing_poll)
    dp.register_message_handler(process_answer,     state=TakePollStates.answering)
