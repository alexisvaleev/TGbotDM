# handlers/poll_take.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from models import PollCompletion
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import Poll, Question, Answer, Response, User
from .common import BACK, BACK_BTN
from .back   import return_to_main_menu

class PollTakeStates(StatesGroup):
    choosing_poll = State()
    answering     = State()

async def start_take_poll(message: types.Message, state: FSMContext):
    await state.finish()
    tg = message.from_user.id

    async with AsyncSessionLocal() as s:
        me = (await s.execute(
            select(User).where(User.tg_id == tg)
        )).scalar_one_or_none()

        if not me:
            return await message.answer("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=BACK_BTN)

        role = me.role

        completed = (await s.execute(
            select(PollCompletion.poll_id)
            .where(PollCompletion.user_id == tg)
        )).scalars().all()

        polls = (await s.execute(
            select(Poll)
            .where(
                Poll.target_role.in_([role, "all"]),
                ~Poll.id.in_(completed)
            )
        )).scalars().all()

    if not polls:
        return await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.", reply_markup=BACK_BTN)

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for p in polls:
        kb.add(p.title)
    kb.add(BACK)

    await PollTakeStates.choosing_poll.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:", reply_markup=kb)

async def process_poll_choice(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 2: –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ ‚Üí –≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π.
    """
    txt = message.text.strip()
    if txt == BACK:
        await state.finish()
        return await return_to_main_menu(message)

    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ä–æ—Å
    async with AsyncSessionLocal() as s:
        poll = (await s.execute(
            select(Poll).where(Poll.title == txt)
        )).scalar_one_or_none()
    if not poll:
        return await message.answer("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=BACK_BTN)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as s:
        qs = (await s.execute(
            select(Question).where(Question.poll_id == poll.id)
        )).scalars().all()
    if not qs:
        return await message.answer("üö´ –í —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=BACK_BTN)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM: id –æ–ø—Ä–æ—Å–∞, —Å–ø–∏—Å–æ–∫ id –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    await state.update_data(
        poll_id=poll.id,
        question_ids=[q.id for q in qs],
        index=0
    )

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await _send_current_question(message, state)

async def _send_current_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data["index"]
    q_id = data["question_ids"][idx]

    # –î–æ—Å—Ç–∞—ë–º –≤–æ–ø—Ä–æ—Å
    async with AsyncSessionLocal() as s:
        q = (await s.execute(
            select(Question).where(Question.id == q_id)
        )).scalar_one()

    # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã–π
    if q.question_type == "single_choice":
        async with AsyncSessionLocal() as s:
            opts = (await s.execute(
                select(Answer).where(Answer.question_id == q_id)
            )).scalars().all()
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for o in opts:
            kb.add(o.answer_text)
        kb.add(BACK)
        await PollTakeStates.answering.set()
        await message.answer(q.question_text, reply_markup=kb)
    else:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await PollTakeStates.answering.set()
        await message.answer(q.question_text, reply_markup=ReplyKeyboardRemove())

async def process_answer(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 3: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å.
    """
    txt = message.text.strip()
    data = await state.get_data()
    idx  = data["index"]
    q_id = data["question_ids"][idx]
    tg   = message.from_user.id

    # –ù–∞–∑–∞–¥?
    if txt == BACK:
        await state.finish()
        return await return_to_main_menu(message)

    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å
    async with AsyncSessionLocal() as s:
        q = (await s.execute(
            select(Question).where(Question.id == q_id)
        )).scalar_one()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
    answer_id    = None
    response_txt = None
    if q.question_type == "single_choice":
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç Answer –ø–æ —Ç–µ–∫—Å—Ç—É
        async with AsyncSessionLocal() as s:
            a = (await s.execute(
                select(Answer)
                .where(Answer.question_id == q_id)
                .where(Answer.answer_text  == txt)
            )).scalar_one_or_none()
        if not a:
            return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=BACK_BTN)
        answer_id = a.id
    else:
        response_txt = txt

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É responses
    async with AsyncSessionLocal() as s:
        s.add(Response(
            user_id        = tg,
            question_id    = q_id,
            answer_id      = answer_id,
            response_text  = response_txt
        ))
        await s.commit()

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    idx += 1
    if idx >= len(data["question_ids"]):
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        async with AsyncSessionLocal() as s:
            s.add(PollCompletion(user_id=tg, poll_id=data["poll_id"]))
            await s.commit()
        await state.finish()
        await message.answer("‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å!", reply_markup=BACK_BTN)
        return await return_to_main_menu(message)

    await state.update_data(index=idx)
    return await _send_current_question(message, state)

def register_poll_take(dp: Dispatcher):
    dp.register_message_handler(
        start_take_poll,
        text="üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å",
        state=None
    )
    dp.register_message_handler(
        process_poll_choice,
        state=PollTakeStates.choosing_poll
    )
    dp.register_message_handler(
        process_answer,
        state=PollTakeStates.answering
    )
