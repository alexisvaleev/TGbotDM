# handlers/poll_take.py

import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy import update, or_
from sqlalchemy.future import select

from database import AsyncSessionLocal
from handlers.common import BACK_BTN
from handlers.back import return_to_main_menu
from models import (
    User, Poll, Question, Answer,
    UserAnswer, UserPollProgress
)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


class PollTaking(StatesGroup):
    choosing_poll       = State()
    answering_questions = State()


async def start_poll_taking(message: types.Message, state: FSMContext):
    await state.finish()
    tg = message.from_user.id
    await message.answer("üîç –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã‚Ä¶", reply_markup=ReplyKeyboardRemove())

    # 1) –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with AsyncSessionLocal() as s:
        user = (await s.execute(
            select(User).where(User.tg_id == tg)
        )).scalar_one_or_none()

    if not user or user.role not in ("student", "teacher"):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø—Ä–æ—Å–∞–º.")

    # 2) –ö–∞–∫–∏–µ –æ–ø—Ä–æ—Å—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    async with AsyncSessionLocal() as s:
        done = (await s.execute(
            select(UserPollProgress.poll_id)
            .where(
                UserPollProgress.user_id == user.id,
                UserPollProgress.is_completed.is_(True)
            )
        )).scalars().all()

    # 3) –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π-–º–∏—à–µ–Ω–µ–π
    rus_map = {"student": "—Å—Ç—É–¥–µ–Ω—Ç—ã", "teacher": "—É—á–∏—Ç–µ–ª—è"}
    allowed = {
        user.role,        # english
        rus_map.get(user.role),  # russian
        "all",            # new english
        "–≤—Å–µ"             # old russian
    }
    allowed.discard(None)

    # 4) –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–µ–ø—Ä–æ—Ö–æ–¥—ë–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as s:
        polls = (await s.execute(
            select(Poll)
            .where(
                Poll.target_role.in_(allowed),
                or_(
                    Poll.group_id.is_(None),
                    Poll.group_id == user.group_id
                )
            )
        )).scalars().all()

    # –£–±–∏—Ä–∞–µ–º —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
    polls = [p for p in polls if p.id not in done]

    logger.debug("User %s role=%s, group=%s", tg, user.role, user.group_id)
    logger.debug("Allowed roles: %r", allowed)
    logger.debug("Found polls (before dedupe): %r", [(p.id,p.title,p.target_role) for p in polls])

    if not polls:
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.", reply_markup=BACK_BTN)

    # 5) –ü—Ä–æ–ø–∏—à–µ–º –∫–Ω–æ–ø–∫–∏
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for idx, p in enumerate(polls, start=1):
        kb.add(KeyboardButton(f"{idx}. {p.title}"))
    kb.add(BACK_BTN)

    await state.update_data(poll_ids=[p.id for p in polls])
    await PollTaking.choosing_poll.set()
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å:", reply_markup=kb)


async def choose_poll(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == BACK_BTN:
        await state.finish()
        return await return_to_main_menu(message)

    data = await state.get_data()
    ids = data.get("poll_ids", [])
    parts = text.split(".")
    if not parts[0].isdigit():
        return await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º.")
    idx = int(parts[0]) - 1
    if idx < 0 or idx >= len(ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")

    poll_id = ids[idx]
    tg = message.from_user.id

    # –∑–∞–≤–æ–¥–∏–º progress –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as s:
        user = (await s.execute(
            select(User).where(User.tg_id == tg)
        )).scalar_one()
        prog = UserPollProgress(user_id=user.id, poll_id=poll_id)
        s.add(prog)
        await s.commit()
        await s.refresh(prog)

        q_objs = (await s.execute(
            select(Question)
            .where(Question.poll_id == poll_id)
            .order_by(Question.id)
        )).scalars().all()

    await state.update_data(
        progress_id=prog.id,
        question_ids=[q.id for q in q_objs],
        q_index=0
    )
    await PollTaking.answering_questions.set()
    return await _ask_question(message, state)


async def _ask_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data["q_index"]
    q_ids = data["question_ids"]

    # –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å?
    if idx >= len(q_ids):
        return await _finish_poll(message, state)

    q_id = q_ids[idx]
    async with AsyncSessionLocal() as s:
        q_obj = (await s.execute(
            select(Question).where(Question.id == q_id)
        )).scalar_one()
        opts = (await s.execute(
            select(Answer).where(Answer.question_id == q_id)
        )).scalars().all()

    # –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    if opts:
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for o in opts:
            kb.add(KeyboardButton(o.answer_text))
        kb.add(BACK_BTN)
        await message.answer(f"‚ùì {q_obj.question_text}", reply_markup=kb)
    else:
        await message.answer(f"‚ùì {q_obj.question_text}", reply_markup=ReplyKeyboardRemove())


async def process_answer(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    idx = data["q_index"]
    q_id = data["question_ids"][idx]
    prog_id = data["progress_id"]

    if text == BACK_BTN:
        await state.finish()
        return await return_to_main_menu(message)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ–æ–±—â–µ
    async with AsyncSessionLocal() as s:
        has_opts = (await s.execute(
            select(Answer).where(Answer.question_id == q_id)
        )).first()

    if has_opts:
        # —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        valid_opts = {a.answer_text for a in (await AsyncSessionLocal()
                                               .execute(select(Answer)
                                                        .where(Answer.question_id == q_id))
                                               ).scalars().all()}
        if text not in valid_opts:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π.")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–ª–∏ –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
    async with AsyncSessionLocal() as s:
        ua = UserAnswer(
            user_id=(await s.execute(
                select(User).where(User.tg_id == message.from_user.id)
            )).scalar_one().id,
            question_id=q_id,
            answer_text=text
        )
        s.add(ua)
        await s.execute(
            update(UserPollProgress)
            .where(UserPollProgress.id == prog_id)
            .values(last_question_id=q_id)
        )
        await s.commit()

    await state.update_data(q_index=idx + 1)
    return await _ask_question(message, state)


async def _finish_poll(message: types.Message, state: FSMContext):
    data = await state.get_data()
    prog_id = data["progress_id"]

    async with AsyncSessionLocal() as s:
        await s.execute(
            update(UserPollProgress)
            .where(UserPollProgress.id == prog_id)
            .values(is_completed=True)
        )
        await s.commit()

    await state.finish()
    return await return_to_main_menu(message)


def register_poll_take(dp: Dispatcher):
    dp.register_message_handler(start_poll_taking, text="üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", state="*")
    dp.register_message_handler(choose_poll, state=PollTaking.choosing_poll)
    dp.register_message_handler(process_answer, state=PollTaking.answering_questions)
