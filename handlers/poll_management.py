# handlers/poll_management.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup

from sqlalchemy.future import select
from sqlalchemy import delete

from database import AsyncSessionLocal
from models import Poll  # –±–æ–ª—å—à–µ –Ω–µ —Ç—è–Ω–µ–º UserPollProgress

from .common import BACK, BACK_BTN
from .back   import return_to_main_menu

class PollDeleteStates(StatesGroup):
    choosing_poll = State()

async def start_delete_poll(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 1: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as s:
        polls = (await s.execute(select(Poll))).scalars().all()

    if not polls:
        return await message.answer(
            "üö´ –ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=BACK_BTN
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –æ–ø—Ä–æ—Å–æ–≤
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for p in polls:
        kb.add(p.title)
    kb.add(BACK)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    await PollDeleteStates.choosing_poll.set()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=kb
    )

async def process_delete_poll(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 2: –ø–æ –≤—ã–±–æ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è ‚Äî —É–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å.
    """
    txt = message.text.strip()

    if txt == BACK:
        await state.finish()
        return await return_to_main_menu(message)

    # –ò—â–µ–º –æ–ø—Ä–æ—Å –ø–æ title
    async with AsyncSessionLocal() as s:
        poll = (await s.execute(
            select(Poll).where(Poll.title == txt)
        )).scalar_one_or_none()
        if not poll:
            return await message.answer(
                "‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=BACK_BTN
            )
        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ ORM (cascade —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã)
        await s.delete(poll)
        await s.commit()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.finish()
    await message.answer(
        f"‚úÖ –û–ø—Ä–æ—Å ¬´{txt}¬ª —É–¥–∞–ª—ë–Ω.",
        reply_markup=BACK_BTN
    )
    return await return_to_main_menu(message)

def register_poll_management(dp: Dispatcher):
    # –°—Ç–∞—Ä—Ç —É–¥–∞–ª–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –≤ state=None
    dp.register_message_handler(
        start_delete_poll,
        text="üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å",
        state=None
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    dp.register_message_handler(
        process_delete_poll,
        state=PollDeleteStates.choosing_poll
    )
