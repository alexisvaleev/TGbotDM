# handlers/poll_management.py

import io
import csv
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile
)
from sqlalchemy import delete, select, update

from database import AsyncSessionLocal
from models import (
    User,
    Poll,
    Question,
    Answer,
    UserPollProgress,
    UserAnswer
)
from handlers.common import BACK_BTN

class DeletePollStates(StatesGroup):
    choosing = State()
    confirming = State()


class ExportPollStates(StatesGroup):
    choosing = State()


async def start_delete_poll(message: types.Message, state: FSMContext):
    """–®–∞–≥ 1. –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    tg_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    async with AsyncSessionLocal() as session:
        user = (await session.execute(
            select(User).where(User.tg_id == tg_id)
        )).scalar()
    if not user or user.role not in ("admin", "teacher"):
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –æ–ø—Ä–æ—Å—ã.")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as session:
        polls = (await session.execute(select(Poll))).scalars().all()
    if not polls:
        return await message.answer("–ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ id –≤ FSM –∏ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é
    await state.update_data(poll_ids=[p.id for p in polls])
    text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" + "\n".join(
        f"{i+1}. {p.title}" for i, p in enumerate(polls)
    )
    await state.set_state(DeletePollStates.choosing.state)
    await message.answer(text, reply_markup=ReplyKeyboardRemove())


async def choose_delete_poll(message: types.Message, state: FSMContext):
    """–®–∞–≥ 2. –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞."""
    data = await state.get_data()
    poll_ids = data.get("poll_ids", [])
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞.")
    idx = int(message.text) - 1
    if idx < 0 or idx >= len(poll_ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    chosen_id = poll_ids[idx]

    await state.update_data(chosen_id=chosen_id)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç"))
    await state.set_state(DeletePollStates.confirming.state)
    await message.answer("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:", reply_markup=kb)


async def confirm_delete_poll(message: types.Message, state: FSMContext):
    """–®–∞–≥ 3. –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ."""
    answer = message.text.strip()
    data = await state.get_data()
    poll_id = data.get("chosen_id")

    if answer != "‚úÖ –î–∞":
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await _return_to_admin_menu(message)
        await state.finish()
        return

    async with AsyncSessionLocal() as session:
        try:
            # 0) –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º last_question_id —É –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–≤ —ç—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞
            await session.execute(
                update(UserPollProgress)
                .where(UserPollProgress.poll_id == poll_id)
                .values(last_question_id=None)
            )

            # 1) –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            await session.execute(
                delete(UserPollProgress).where(UserPollProgress.poll_id == poll_id)
            )
            # 2) –°–æ–±–∏—Ä–∞–µ–º question_ids
            q_res = await session.execute(
                select(Question.id).where(Question.poll_id == poll_id)
            )
            question_ids = [q_id for (q_id,) in q_res.all()]

            if question_ids:
                # 3) –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã
                await session.execute(
                    delete(UserAnswer).where(UserAnswer.question_id.in_(question_ids))
                )
                # 4) –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã Answer
                await session.execute(
                    delete(Answer).where(Answer.question_id.in_(question_ids))
                )
                # 5) –£–¥–∞–ª—è–µ–º —Å–∞–º–∏ –≤–æ–ø—Ä–æ—Å—ã
                await session.execute(
                    delete(Question).where(Question.id.in_(question_ids))
                )

            # 6) –ù–∞–∫–æ–Ω–µ—Ü —É–¥–∞–ª—è–µ–º —Å–∞–º Poll
            await session.execute(
                delete(Poll).where(Poll.id == poll_id)
            )

            await session.commit()
            await message.answer("‚úÖ –û–ø—Ä–æ—Å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
        except Exception as e:
            await session.rollback()
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∞—Å–∫–∞–¥–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏:", e)
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞.")

    await _return_to_admin_menu(message)
    await state.finish()


async def start_export_poll(message: types.Message, state: FSMContext):
    """–®–∞–≥ 1. –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ä–æ—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV."""
    tg_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user = (await session.execute(
            select(User).where(User.tg_id == tg_id)
        )).scalar()
    if not user or user.role != "admin":
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")

    async with AsyncSessionLocal() as session:
        polls = (await session.execute(select(Poll))).scalars().all()
    if not polls:
        return await message.answer("–ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

    await state.update_data(poll_ids=[p.id for p in polls])
    text = "üì• –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:\n" + "\n".join(
        f"{i+1}. {p.title}" for i, p in enumerate(polls)
    )
    await state.set_state(ExportPollStates.choosing.state)
    await message.answer(text, reply_markup=ReplyKeyboardRemove())


async def choose_export_poll(message: types.Message, state: FSMContext):
    """–®–∞–≥ 2. –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–¥–∞–µ–º CSV."""
    data = await state.get_data()
    poll_ids = data.get("poll_ids", [])
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞.")
    idx = int(message.text) - 1
    if idx < 0 or idx >= len(poll_ids):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    poll_id = poll_ids[idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º CSV
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(["question_id", "question_text", "user_tg_id", "answer_text"])

    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞
        questions = (await session.execute(
            select(Question).where(Question.poll_id == poll_id)
        )).scalars().all()

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        for q in questions:
            rows = (await session.execute(
                select(UserAnswer, User.tg_id)
                .join(User, User.id == UserAnswer.user_id)
                .where(UserAnswer.question_id == q.id)
            )).all()
            for ua, tg in rows:
                writer.writerow([
                    q.id,
                    q.question_text,
                    tg,
                    ua.answer_text
                ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    output.seek(0)
    file_bytes = output.getvalue().encode("utf-8")
    filename = f"poll_{poll_id}_results.csv"
    await message.answer_document(
        InputFile(io.BytesIO(file_bytes), filename=filename)
    )

    await _return_to_admin_menu(message)
    await state.finish()


async def _return_to_admin_menu(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    kb.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å"))
    kb.add(KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
    kb.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


def register_poll_management(dp: Dispatcher):
    dp.register_message_handler(
        start_delete_poll, text="üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å", state="*"
    )
    dp.register_message_handler(
        choose_delete_poll, state=DeletePollStates.choosing
    )
    dp.register_message_handler(
        confirm_delete_poll, state=DeletePollStates.confirming
    )

    dp.register_message_handler(
        start_export_poll, text="üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", state="*"
    )
    dp.register_message_handler(
        choose_export_poll, state=ExportPollStates.choosing
    )
