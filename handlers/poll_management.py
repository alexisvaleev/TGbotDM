# handlers/poll_management.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from sqlalchemy import delete
from sqlalchemy.future import select

from database import AsyncSessionLocal
from models import Poll, PollCompletion
from .common import BACK
from .back import return_to_main_menu

class PollDeleteStates(StatesGroup):
    choosing_poll = State()

async def start_delete_poll(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 1: –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    await state.finish()
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã
    async with AsyncSessionLocal() as s:
        polls = (await s.execute(select(Poll))).scalars().all()

    if not polls:
        # –ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ ‚Äî —Å—Ä–∞–∑—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return await return_to_main_menu(message)

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –æ–ø—Ä–æ—Å–æ–≤ + ¬´–ù–∞–∑–∞–¥¬ª
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for p in polls:
        kb.add(p.title)
    kb.add(BACK)

    await PollDeleteStates.choosing_poll.set()
    await message.answer(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )

async def process_delete_poll(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 2: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∏ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å + —Å–≤—è–∑–∞–Ω–Ω—ã–µ PollCompletion.
    """
    text = message.text.strip()

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == BACK:
        await state.finish()
        return await return_to_main_menu(message)

    # –ò—â–µ–º –æ–ø—Ä–æ—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    async with AsyncSessionLocal() as s:
        poll = (await s.execute(
            select(Poll).where(Poll.title == text)
        )).scalar_one_or_none()

        if not poll:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            kb.add(BACK)
            return await message.answer(
                "‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª.",
                reply_markup=kb
            )

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞
        await s.execute(
            delete(PollCompletion).where(PollCompletion.poll_id == poll.id)
        )
        # –£–¥–∞–ª—è–µ–º —Å–∞–º –æ–ø—Ä–æ—Å (–≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ cascade –≤ –º–æ–¥–µ–ª–∏)
        await s.delete(poll)
        await s.commit()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await state.finish()
    await message.answer(
        f"‚úÖ –û–ø—Ä–æ—Å ¬´{text}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    return await return_to_main_menu(message)

def register_poll_management(dp: Dispatcher):
    dp.register_message_handler(
        start_delete_poll,
        text="üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å",
        state=None
    )
    dp.register_message_handler(
        process_delete_poll,
        state=PollDeleteStates.choosing_poll
    )
